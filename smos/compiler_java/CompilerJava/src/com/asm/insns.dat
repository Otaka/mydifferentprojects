AAA		void				[	37]					8086
AAD		imm				[i:	d5 ib,u]				8086,SB
AAM		void				[	d4 0a]					8086
AAM		imm				[i:	d4 ib,u]				8086,SB
AAS		void				[	3f]					8086
ADC		mem,reg8			[mr:	hle 10 /r]				8086,SM,LOCK
ADC		reg8,reg8			[mr:	10 /r]					8086
ADC		mem,reg16			[mr:	hle o16 11 /r]				8086,SM,LOCK
ADC		reg16,reg16			[mr:	o16 11 /r]				8086
ADC		mem,reg32			[mr:	hle o32 11 /r]				386,SM,LOCK
ADC		reg32,reg32			[mr:	o32 11 /r]				386
ADC		reg8,mem			[rm:	12 /r]					8086,SM
ADC		reg8,reg8			[rm:	12 /r]					8086
ADC		reg16,mem			[rm:	o16 13 /r]				8086,SM
ADC		reg16,reg16			[rm:	o16 13 /r]				8086
ADC		reg32,mem			[rm:	o32 13 /r]				386,SM
ADC		reg32,reg32			[rm:	o32 13 /r]				386
ADC		rm16,imm8			[mi:	hle o16 83 /2 ib,s]			8086,LOCK
ADC		rm32,imm8			[mi:	hle o32 83 /2 ib,s]			386,LOCK
ADC		reg_al,imm			[-i:	14 ib]					8086,SM
ADC		reg_ax,sbyteword		[mi:	o16 83 /2 ib,s]				8086,SM,ND
ADC		reg_ax,imm			[-i:	o16 15 iw]				8086,SM
ADC		reg_eax,sbytedword		[mi:	o32 83 /2 ib,s]				386,SM,ND
ADC		reg_eax,imm			[-i:	o32 15 id]				386,SM
ADC		rm8,imm				[mi:	hle 80 /2 ib]				8086,SM,LOCK
ADC		rm16,sbyteword			[mi:	hle o16 83 /2 ib,s]			8086,SM,LOCK,ND
ADC		rm16,imm			[mi:	hle o16 81 /2 iw]			8086,SM,LOCK
ADC		rm32,sbytedword			[mi:	hle o32 83 /2 ib,s]			386,SM,LOCK,ND
ADC		rm32,imm			[mi:	hle o32 81 /2 id]			386,SM,LOCK
ADC		mem,imm8			[mi:	hle 80 /2 ib]				8086,SM,LOCK,ND
ADC		mem,sbyteword16			[mi:	hle o16 83 /2 ib,s]			8086,SM,LOCK,ND
ADC		mem,imm16			[mi:	hle o16 81 /2 iw]			8086,SM,LOCK
ADC		mem,sbytedword32		[mi:	hle o32 83 /2 ib,s]			386,SM,LOCK,ND
ADC		mem,imm32			[mi:	hle o32 81 /2 id]			386,SM,LOCK
ADC		rm8,imm				[mi:	hle 82 /2 ib]				8086,SM,LOCK,ND
ADD		mem,reg8			[mr:	hle 00 /r]				8086,SM,LOCK
ADD		reg8,reg8			[mr:	00 /r]					8086
ADD		mem,reg16			[mr:	hle o16 01 /r]				8086,SM,LOCK
ADD		reg16,reg16			[mr:	o16 01 /r]				8086
ADD		mem,reg32			[mr:	hle o32 01 /r]				386,SM,LOCK
ADD		reg32,reg32			[mr:	o32 01 /r]				386
ADD		reg8,mem			[rm:	02 /r]					8086,SM
ADD		reg8,reg8			[rm:	02 /r]					8086
ADD		reg16,mem			[rm:	o16 03 /r]				8086,SM
ADD		reg16,reg16			[rm:	o16 03 /r]				8086
ADD		reg32,mem			[rm:	o32 03 /r]				386,SM
ADD		reg32,reg32			[rm:	o32 03 /r]				386
ADD		rm16,imm8			[mi:	hle o16 83 /0 ib,s]			8086,LOCK
ADD		rm32,imm8			[mi:	hle o32 83 /0 ib,s]			386,LOCK
ADD		reg_al,imm			[-i:	04 ib]					8086,SM
ADD		reg_ax,sbyteword		[mi:	o16 83 /0 ib,s]				8086,SM,ND
ADD		reg_ax,imm			[-i:	o16 05 iw]				8086,SM
ADD		reg_eax,sbytedword		[mi:	o32 83 /0 ib,s]				386,SM,ND
ADD		reg_eax,imm			[-i:	o32 05 id]				386,SM
ADD		rm8,imm				[mi:	hle 80 /0 ib]				8086,SM,LOCK
ADD		rm16,sbyteword			[mi:	hle o16 83 /0 ib,s]			8086,SM,LOCK,ND
ADD		rm16,imm			[mi:	hle o16 81 /0 iw]			8086,SM,LOCK
ADD		rm32,sbytedword			[mi:	hle o32 83 /0 ib,s]			386,SM,LOCK,ND
ADD		rm32,imm			[mi:	hle o32 81 /0 id]			386,SM,LOCK
ADD		mem,imm8			[mi:	hle 80 /0 ib]				8086,SM,LOCK
ADD		mem,sbyteword16			[mi:	hle o16 83 /0 ib,s]			8086,SM,LOCK,ND
ADD		mem,imm16			[mi:	hle o16 81 /0 iw]			8086,SM,LOCK
ADD		mem,sbytedword32		[mi:	hle o32 83 /0 ib,s]			386,SM,LOCK,ND
ADD		mem,imm32			[mi:	hle o32 81 /0 id]			386,SM,LOCK
ADD		rm8,imm				[mi:	hle 82 /0 ib]				8086,SM,LOCK,ND
AND		mem,reg8			[mr:	hle 20 /r]				8086,SM,LOCK
AND		reg8,reg8			[mr:	20 /r]					8086
AND		mem,reg16			[mr:	hle o16 21 /r]				8086,SM,LOCK
AND		reg16,reg16			[mr:	o16 21 /r]				8086
AND		mem,reg32			[mr:	hle o32 21 /r]				386,SM,LOCK
AND		reg32,reg32			[mr:	o32 21 /r]				386
AND		reg8,mem			[rm:	22 /r]					8086,SM
AND		reg8,reg8			[rm:	22 /r]					8086
AND		reg16,mem			[rm:	o16 23 /r]				8086,SM
AND		reg16,reg16			[rm:	o16 23 /r]				8086
AND		reg32,mem			[rm:	o32 23 /r]				386,SM
AND		reg32,reg32			[rm:	o32 23 /r]				386
AND		rm16,imm8			[mi:	hle o16 83 /4 ib,s]			8086,LOCK
AND		rm32,imm8			[mi:	hle o32 83 /4 ib,s]			386,LOCK
AND		reg_al,imm			[-i:	24 ib]					8086,SM
AND		reg_ax,sbyteword		[mi:	o16 83 /4 ib,s]				8086,SM,ND
AND		reg_ax,imm			[-i:	o16 25 iw]				8086,SM
AND		reg_eax,sbytedword		[mi:	o32 83 /4 ib,s]				386,SM,ND
AND		reg_eax,imm			[-i:	o32 25 id]				386,SM
AND		rm8,imm				[mi:	hle 80 /4 ib]				8086,SM,LOCK
AND		rm16,sbyteword			[mi:	hle o16 83 /4 ib,s]			8086,SM,LOCK,ND
AND		rm16,imm			[mi:	hle o16 81 /4 iw]			8086,SM,LOCK
AND		rm32,sbytedword			[mi:	hle o32 83 /4 ib,s]			386,SM,LOCK,ND
AND		rm32,imm			[mi:	hle o32 81 /4 id]			386,SM,LOCK
AND		mem,imm8			[mi:	hle 80 /4 ib]				8086,SM,LOCK
AND		mem,sbyteword16			[mi:	hle o16 83 /4 ib,s]			8086,SM,LOCK,ND
AND		mem,imm16			[mi:	hle o16 81 /4 iw]			8086,SM,LOCK
AND		mem,sbytedword32		[mi:	hle o32 83 /4 ib,s]			386,SM,LOCK,ND
AND		mem,imm32			[mi:	hle o32 81 /4 id]			386,SM,LOCK
AND		rm8,imm				[mi:	hle 82 /4 ib]				8086,SM,LOCK,ND
ARPL		mem,reg16			[mr:	63 /r]					286,PROT,SM
ARPL		reg16,reg16			[mr:	63 /r]					286,PROT
BOUND		reg16,mem			[rm:	o16 62 /r]				186
BOUND		reg32,mem			[rm:	o32 62 /r]				386
BSF		reg16,mem			[rm:	o16 nof3 0f bc /r]			386,SM
BSF		reg16,reg16			[rm:	o16 nof3 0f bc /r]			386
BSF		reg32,mem			[rm:	o32 nof3 0f bc /r]			386,SM
BSF		reg32,reg32			[rm:	o32 nof3 0f bc /r]			386
BSR		reg16,mem			[rm:	o16 nof3 0f bd /r]			386,SM
BSR		reg16,reg16			[rm:	o16 nof3 0f bd /r]			386
BSR		reg32,mem			[rm:	o32 nof3 0f bd /r]			386,SM
BSR		reg32,reg32			[rm:	o32 nof3 0f bd /r]			386
BSWAP		reg32				[r:	o32 0f c8  embreg]				486
BT		mem,reg16			[mr:	o16 0f a3 /r]				386,SM
BT		reg16,reg16			[mr:	o16 0f a3 /r]				386
BT		mem,reg32			[mr:	o32 0f a3 /r]				386,SM
BT		reg32,reg32			[mr:	o32 0f a3 /r]				386
BT		rm16,imm			[mi:	o16 0f ba /4 ib,u]			386,SB
BT		rm32,imm			[mi:	o32 0f ba /4 ib,u]			386,SB
BTC		mem,reg16			[mr:	hle o16 0f bb /r]			386,SM,LOCK
BTC		reg16,reg16			[mr:	o16 0f bb /r]				386
BTC		mem,reg32			[mr:	hle o32 0f bb /r]			386,SM,LOCK
BTC		reg32,reg32			[mr:	o32 0f bb /r]				386
BTC		rm16,imm			[mi:	hle o16 0f ba /7 ib,u]		386,SB,LOCK
BTC		rm32,imm			[mi:	hle o32 0f ba /7 ib,u]		386,SB,LOCK
BTR		mem,reg16			[mr:	hle o16 0f b3 /r]			386,SM,LOCK
BTR		reg16,reg16			[mr:	o16 0f b3 /r]				386
BTR		mem,reg32			[mr:	hle o32 0f b3 /r]			386,SM,LOCK
BTR		reg32,reg32			[mr:	o32 0f b3 /r]				386
BTR		rm16,imm			[mi:	hle o16 0f ba /6 ib,u]		386,SB,LOCK
BTR		rm32,imm			[mi:	hle o32 0f ba /6 ib,u]		386,SB,LOCK
BTS		mem,reg16			[mr:	hle o16 0f ab /r]			386,SM,LOCK
BTS		reg16,reg16			[mr:	o16 0f ab /r]				386
BTS		mem,reg32			[mr:	hle o32 0f ab /r]			386,SM,LOCK
BTS		reg32,reg32			[mr:	o32 0f ab /r]				386
BTS		rm16,imm			[mi:	hle o16 0f ba /5 ib,u]		386,SB,LOCK
BTS		rm32,imm			[mi:	hle o32 0f ba /5 ib,u]		386,SB,LOCK
CALL		imm					[i:	odf e8 rel]					8086,BND
CALL		imm16				[ji:	o16 9a iw iw]			8086
CALL		imm					[ji:	o16 9a iw iw]			8086
CALL		imm32				[ji:	o32 9a id iw]			386
CALL		imm					[ji:	o32 9a id iw]			386
CALL		rm16				[m:	o16 ff /2]					8086,BND
CALL		rm32				[m:	o32 ff /2]					386,BND
CBW		void				[	o16 98]						8086
CDQ		void				[	o32 99]						386
CLC		void				[	f8]							8086
CLD		void				[	fc]							8086
CLI		void				[	fa]							8086
CLTS		void				[	0f 06]						286,PRIV
CMC		void				[	f5]							8086
CMP		mem,reg8			[mr:	38 /r]					8086,SM
CMP		reg8,reg8			[mr:	38 /r]					8086
CMP		mem,reg16			[mr:	o16 39 /r]				8086,SM
CMP		reg16,reg16			[mr:	o16 39 /r]				8086
CMP		mem,reg32			[mr:	o32 39 /r]				386,SM
CMP		reg32,reg32			[mr:	o32 39 /r]				386
CMP		reg8,mem			[rm:	3a /r]					8086,SM
CMP		reg8,reg8			[rm:	3a /r]					8086
CMP		reg16,mem			[rm:	o16 3b /r]				8086,SM
CMP		reg16,reg16			[rm:	o16 3b /r]				8086
CMP		reg32,mem			[rm:	o32 3b /r]				386,SM
CMP		reg32,reg32			[rm:	o32 3b /r]				386
CMP		rm16,imm8			[mi:	o16 83 /7 ib,s]				8086
CMP		rm32,imm8			[mi:	o32 83 /7 ib,s]				386
CMP		reg_al,imm			[-i:	3c ib]					8086,SM
CMP		reg_ax,sbyteword		[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		reg_ax,imm			[-i:	o16 3d iw]				8086,SM
CMP		reg_eax,sbytedword		[mi:	o32 83 /7 ib,s]				386,SM,ND
CMP		reg_eax,imm			[-i:	o32 3d id]				386,SM
CMP		rm8,imm				[mi:	80 /7 ib]				8086,SM
CMP		rm16,sbyteword			[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		rm16,imm			[mi:	o16 81 /7 iw]				8086,SM
CMP		rm32,sbytedword			[mi:	o32 83 /7 ib,s]				386,SM,ND
CMP		rm32,imm			[mi:	o32 81 /7 id]				386,SM
CMP		mem,imm8			[mi:	80 /7 ib]				8086,SM
CMP		mem,sbyteword16			[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		mem,imm16			[mi:	o16 81 /7 iw]				8086,SM
CMP		mem,sbytedword32		[mi:	o32 83 /7 ib,s]				386,SM,ND
CMP		mem,imm32			[mi:	o32 81 /7 id]				386,SM
CMP		rm8,imm				[mi:	82 /7 ib]				8086,SM,ND
CMPSB		void				[	repe a6]				8086
CMPSD		void				[	repe o32 a7]				386
CMPSW		void				[	repe o16 a7]				8086
CMPXCHG		mem,reg8			[mr:	hle 0f b0 /r]				PENT,SM,LOCK
CMPXCHG		reg8,reg8			[mr:	0f b0 /r]				PENT
CMPXCHG		mem,reg16			[mr:	hle o16 0f b1 /r]			PENT,SM,LOCK
CMPXCHG		reg16,reg16			[mr:	o16 0f b1 /r]				PENT
CMPXCHG		mem,reg32			[mr:	hle o32 0f b1 /r]			PENT,SM,LOCK
CMPXCHG		reg32,reg32			[mr:	o32 0f b1 /r]				PENT
CMPXCHG8B	mem				[m:	hle norexw 0f c7 /1]			PENT,LOCK
CPUID		void				[	0f a2]					PENT
CWD		void				[	o16 99]					8086
CWDE		void				[	o32 98]					386
DAA		void				[	27]					8086
DAS		void				[	2f]					8086
DEC		reg16				[r:	o16 48 embreg]				8086
DEC		reg32				[r:	o32 48 embreg]				386
DEC		rm8				[m:	hle fe /1]				8086,LOCK
DEC		rm16				[m:	hle o16 ff /1]				8086,LOCK
DEC		rm32				[m:	hle o32 ff /1]				386,LOCK
DIV		rm8				[m:	f6 /6]					8086
DIV		rm16				[m:	o16 f7 /6]				8086
DIV		rm32				[m:	o32 f7 /6]				386
ENTER		imm,imm				[ij:	c8 iw ib,u]				186
F2XM1		void				[	d9 f0]					8086,FPU
FABS		void				[	d9 e1]					8086,FPU
FADD		mem32				[m:	d8 /0]					8086,FPU
FADD		mem64				[m:	dc /0]					8086,FPU
FADD		fpureg			[r:	dc c0 embreg]				8086,FPU
FADD		fpureg				[r:	d8 c0 embreg]				8086,FPU
FADD		fpureg,fpu0			[r-:	dc c0 embreg]				8086,FPU
FADD		fpu0,fpureg			[-r:	d8 c0 embreg]				8086,FPU
FADD		void				[	de c1]					8086,FPU,ND
FADDP		fpureg				[r:	de c0 embreg]				8086,FPU
FADDP		fpureg,fpu0			[r-:	de c0 embreg]				8086,FPU
FADDP		void				[	de c1]					8086,FPU,ND
FBLD		mem80				[m:	df /4]					8086,FPU
FBLD		mem				[m:	df /4]					8086,FPU
FBSTP		mem80				[m:	df /6]					8086,FPU
FBSTP		mem				[m:	df /6]					8086,FPU
FCHS		void				[	d9 e0]					8086,FPU
FCLEX		void				[	wait db e2]				8086,FPU
FCOM		mem32				[m:	d8 /2]					8086,FPU
FCOM		mem64				[m:	dc /2]					8086,FPU
FCOM		fpureg				[r:	d8 d0 embreg]				8086,FPU
FCOM		fpu0,fpureg			[-r:	d8 d0 embreg]				8086,FPU
FCOM		void				[	d8 d1]					8086,FPU,ND
FCOMP		mem32				[m:	d8 /3]					8086,FPU
FCOMP		mem64				[m:	dc /3]					8086,FPU
FCOMP		fpureg				[r:	d8 d8 embreg]				8086,FPU
FCOMP		fpu0,fpureg			[-r:	d8 d8 embreg]				8086,FPU
FCOMP		void				[	d8 d9]					8086,FPU,ND
FCOMPP		void				[	de d9]					8086,FPU
FCOS		void				[	d9 ff]					386,FPU
FDECSTP		void				[	d9 f6]					8086,FPU
FDISI		void				[	wait db e1]				8086,FPU
FDIV		mem32				[m:	d8 /6]					8086,FPU
FDIV		mem64				[m:	dc /6]					8086,FPU
FDIV		fpureg			[r:	dc f8 embreg]				8086,FPU
FDIV		fpureg				[r:	d8 f0 embreg]				8086,FPU
FDIV		fpureg,fpu0			[r-:	dc f8 embreg]				8086,FPU
FDIV		fpu0,fpureg			[-r:	d8 f0 embreg]				8086,FPU
FDIV		void				[	de f9]					8086,FPU,ND
FDIVP		fpureg				[r:	de f8 embreg]				8086,FPU
FDIVP		fpureg,fpu0			[r-:	de f8 embreg]				8086,FPU
FDIVP		void				[	de f9]					8086,FPU,ND
FDIVR		mem32				[m:	d8 /7]					8086,FPU
FDIVR		mem64				[m:	dc /7]					8086,FPU
FDIVR		fpureg			[r:	dc f0 embreg]				8086,FPU
FDIVR		fpureg,fpu0			[r-:	dc f0 embreg]				8086,FPU
FDIVR		fpureg				[r:	d8 f8 embreg]				8086,FPU
FDIVR		fpu0,fpureg			[-r:	d8 f8 embreg]				8086,FPU
FDIVR		void				[	de f1]					8086,FPU,ND
FDIVRP		fpureg				[r:	de f0 embreg]				8086,FPU
FDIVRP		fpureg,fpu0			[r-:	de f0 embreg]				8086,FPU
FDIVRP		void				[	de f1]					8086,FPU,ND
FENI		void				[	wait db e0]				8086,FPU
FFREE		fpureg				[r:	dd c0 embreg]				8086,FPU
FFREE		void				[	dd c1]					8086,FPU
FIADD		mem32				[m:	da /0]					8086,FPU
FIADD		mem16				[m:	de /0]					8086,FPU
FICOM		mem32				[m:	da /2]					8086,FPU
FICOM		mem16				[m:	de /2]					8086,FPU
FICOMP		mem32				[m:	da /3]					8086,FPU
FICOMP		mem16				[m:	de /3]					8086,FPU
FIDIV		mem32				[m:	da /6]					8086,FPU
FIDIV		mem16				[m:	de /6]					8086,FPU
FIDIVR		mem32				[m:	da /7]					8086,FPU
FIDIVR		mem16				[m:	de /7]					8086,FPU
FILD		mem32				[m:	db /0]					8086,FPU
FILD		mem16				[m:	df /0]					8086,FPU
FILD		mem64				[m:	df /5]					8086,FPU
FIMUL		mem32				[m:	da /1]					8086,FPU
FIMUL		mem16				[m:	de /1]					8086,FPU
FINCSTP		void				[	d9 f7]					8086,FPU
FINIT		void				[	wait db e3]				8086,FPU
FIST		mem32				[m:	db /2]					8086,FPU
FIST		mem16				[m:	df /2]					8086,FPU
FISTP		mem32				[m:	db /3]					8086,FPU
FISTP		mem16				[m:	df /3]					8086,FPU
FISTP		mem64				[m:	df /7]					8086,FPU
FISUB		mem32				[m:	da /4]					8086,FPU
FISUB		mem16				[m:	de /4]					8086,FPU
FISUBR		mem32				[m:	da /5]					8086,FPU
FISUBR		mem16				[m:	de /5]					8086,FPU
FLD		mem32				[m:	d9 /0]					8086,FPU
FLD		mem64				[m:	dd /0]					8086,FPU
FLD		mem80				[m:	db /5]					8086,FPU
FLD		fpureg				[r:	d9 c0 embreg]				8086,FPU
FLD		void				[	d9 c1]					8086,FPU,ND
FLD1		void				[	d9 e8]					8086,FPU
FLDCW		mem				[m:	d9 /5]					8086,FPU,SW
FLDENV		mem				[m:	d9 /4]					8086,FPU
FLDL2E		void				[	d9 ea]					8086,FPU
FLDL2T		void				[	d9 e9]					8086,FPU
FLDLG2		void				[	d9 ec]					8086,FPU
FLDLN2		void				[	d9 ed]					8086,FPU
FLDPI		void				[	d9 eb]					8086,FPU
FLDZ		void				[	d9 ee]					8086,FPU
FMUL		mem32				[m:	d8 /1]					8086,FPU
FMUL		mem64				[m:	dc /1]					8086,FPU
FMUL		fpureg                          [r:	dc c8 embreg]				8086,FPU
FMUL		fpureg,fpu0			[r-:	dc c8 embreg]				8086,FPU
FMUL		fpureg				[r:	d8 c8 embreg]				8086,FPU
FMUL		fpu0,fpureg			[-r:	d8 c8 embreg]				8086,FPU
FMUL		void				[	de c9]					8086,FPU,ND
FMULP		fpureg				[r:	de c8 embreg]				8086,FPU
FMULP		fpureg,fpu0			[r-:	de c8 embreg]				8086,FPU
FMULP		void				[	de c9]					8086,FPU,ND
FNCLEX		void				[	db e2]					8086,FPU
FNDISI		void				[	db e1]					8086,FPU
FNENI		void				[	db e0]					8086,FPU
FNINIT		void				[	db e3]					8086,FPU
FNOP		void				[	d9 d0]					8086,FPU
FNSAVE		mem				[m:	dd /6]					8086,FPU
FNSTCW		mem				[m:	d9 /7]					8086,FPU,SW
FNSTENV		mem				[m:	d9 /6]					8086,FPU
FNSTSW		mem				[m:	dd /7]					8086,FPU,SW
FNSTSW		reg_ax				[-:	df e0]					286,FPU
FPATAN		void				[	d9 f3]					8086,FPU
FPREM		void				[	d9 f8]					8086,FPU
FPREM1		void				[	d9 f5]					386,FPU
FPTAN		void				[	d9 f2]					8086,FPU
FRNDINT		void				[	d9 fc]					8086,FPU
FRSTOR		mem				[m:	dd /4]					8086,FPU
FSAVE		mem				[m:	wait dd /6]				8086,FPU
FSCALE		void				[	d9 fd]					8086,FPU
FSETPM		void				[	db e4]					286,FPU
FSIN		void				[	d9 fe]					386,FPU
FSINCOS		void				[	d9 fb]					386,FPU
FSQRT		void				[	d9 fa]					8086,FPU
FST		mem32				[m:	d9 /2]					8086,FPU
FST		mem64				[m:	dd /2]					8086,FPU
FST		fpureg				[r:	dd d0 embreg]				8086,FPU
FST		void				[	dd d1]					8086,FPU,ND
FSTCW		mem					[m:	wait d9 /7]				8086,FPU,SW
FSTENV		mem					[m:	wait d9 /6]				8086,FPU
FSTP		mem32				[m:	d9 /3]					8086,FPU
FSTP		mem64				[m:	dd /3]					8086,FPU
FSTP		mem80				[m:	db /7]					8086,FPU
FSTP		fpureg				[r:	dd d8 embreg]				8086,FPU
FSTP		void				[	dd d9]					8086,FPU,ND
FSTSW		mem					[m:	wait dd /7]				8086,FPU,SW
FSTSW		reg_ax				[-:	wait df e0]				286,FPU
FSUB		mem32				[m:	d8 /4]					8086,FPU
FSUB		mem64				[m:	dc /4]					8086,FPU
FSUB		fpureg				[r:	dc e8 embreg]				8086,FPU
FSUB		fpureg,fpu0			[r-:	dc e8 embreg]				8086,FPU
FSUB		fpureg				[r:	d8 e0 embreg]				8086,FPU
FSUB		fpu0,fpureg			[-r:	d8 e0 embreg]				8086,FPU
FSUB		void				[	de e9]					8086,FPU,ND
FSUBP		fpureg				[r:	de e8 embreg]				8086,FPU
FSUBP		fpureg,fpu0			[r-:	de e8 embreg]				8086,FPU
FSUBP		void				[	de e9]					8086,FPU,ND
FSUBR		mem32				[m:	d8 /5]					8086,FPU
FSUBR		mem64				[m:	dc /5]					8086,FPU
FSUBR		fpureg				[r:	dc e0 embreg]				8086,FPU
FSUBR		fpureg,fpu0			[r-:	dc e0 embreg]				8086,FPU
FSUBR		fpureg				[r:	d8 e8 embreg]				8086,FPU
FSUBR		fpu0,fpureg			[-r:	d8 e8 embreg]				8086,FPU
FSUBR		void				[	de e1]					8086,FPU,ND
FSUBRP		fpureg				[r:	de e0 embreg]				8086,FPU
FSUBRP		fpureg,fpu0			[r-:	de e0 embreg]				8086,FPU
FSUBRP		void				[	de e1]					8086,FPU,ND
FTST		void				[	d9 e4]					8086,FPU
FUCOM		fpureg				[r:	dd e0 embreg]				386,FPU
FUCOM		fpu0,fpureg			[-r:	dd e0 embreg]				386,FPU
FUCOM		void				[	dd e1]					386,FPU,ND
FUCOMP		fpureg				[r:	dd e8 embreg]				386,FPU
FUCOMP		fpu0,fpureg			[-r:	dd e8 embreg]				386,FPU
FUCOMP		void				[	dd e9]					386,FPU,ND
FUCOMPP		void				[	da e9]					386,FPU
FXAM		void				[	d9 e5]					8086,FPU
FXCH		fpureg				[r:	d9 c8 embreg]				8086,FPU
FXCH		fpureg,fpu0			[r-:	d9 c8 embreg]				8086,FPU
FXCH		fpu0,fpureg			[-r:	d9 c8 embreg]				8086,FPU
FXCH		void				[	d9 c9]					8086,FPU,ND
FXTRACT		void				[	d9 f4]					8086,FPU
FYL2X		void				[	d9 f1]					8086,FPU
FYL2XP1		void				[	d9 f9]					8086,FPU
HLT		void				[	f4]					8086,PRIV
ICEBP		void				[	f1]					386,ND
IDIV		rm8					[m:	f6 /7]					8086
IDIV		rm16				[m:	o16 f7 /7]				8086
IDIV		rm32				[m:	o32 f7 /7]				386
IMUL		rm8					[m:	f6 /5]					8086
IMUL		rm16				[m:	o16 f7 /5]				8086
IMUL		rm32				[m:	o32 f7 /5]				386
IMUL		reg16,mem			[rm:	o16 0f af /r]				386,SM
IMUL		reg16,reg16			[rm:	o16 0f af /r]				386
IMUL		reg32,mem			[rm:	o32 0f af /r]				386,SM
IMUL		reg32,reg32			[rm:	o32 0f af /r]				386
IMUL		reg16,mem,imm8			[rmi:	o16 6b /r ib,s]				186,SM
IMUL		reg16,mem,sbyteword		[rmi:	o16 6b /r ib,s]				186,SM,ND
IMUL		reg16,mem,imm16			[rmi:	o16 69 /r iw]				186,SM
IMUL		reg16,mem,imm			[rmi:	o16 69 /r iw]				186,SM,ND
IMUL		reg16,reg16,imm8		[rmi:	o16 6b /r ib,s]				186
IMUL		reg16,reg16,sbyteword		[rmi:	o16 6b /r ib,s]				186,SM,ND
IMUL		reg16,reg16,imm16		[rmi:	o16 69 /r iw]				186
IMUL		reg16,reg16,imm			[rmi:	o16 69 /r iw]				186,SM,ND
IMUL		reg32,mem,imm8			[rmi:	o32 6b /r ib,s]				386,SM
IMUL		reg32,mem,sbytedword		[rmi:	o32 6b /r ib,s]				386,SM,ND
IMUL		reg32,mem,imm32			[rmi:	o32 69 /r id]				386,SM
IMUL		reg32,mem,imm			[rmi:	o32 69 /r id]				386,SM,ND
IMUL		reg32,reg32,imm8		[rmi:	o32 6b /r ib,s]				386
IMUL		reg32,reg32,sbytedword		[rmi:	o32 6b /r ib,s]				386,SM,ND
IMUL		reg32,reg32,imm32		[rmi:	o32 69 /r id]				386
IMUL		reg32,reg32,imm			[rmi:	o32 69 /r id]				386,SM,ND
IMUL		reg16,imm8			[r+mi:	o16 6b /r ib,s]				186
IMUL		reg16,sbyteword			[r+mi:	o16 6b /r ib,s]				186,SM,ND
IMUL		reg16,imm16			[r+mi:	o16 69 /r iw]				186
IMUL		reg16,imm			[r+mi:	o16 69 /r iw]				186,SM,ND
IMUL		reg32,imm8			[r+mi:	o32 6b /r ib,s]				386
IMUL		reg32,sbytedword		[r+mi:	o32 6b /r ib,s]				386,SM,ND
IMUL		reg32,imm32			[r+mi:	o32 69 /r id]				386
IMUL		reg32,imm			[r+mi:	o32 69 /r id]				386,SM,ND
IN		reg_al,imm			[-i:	e4 ib,u]				8086,SB
IN		reg_ax,imm			[-i:	o16 e5 ib,u]				8086,SB
IN		reg_eax,imm			[-i:	o32 e5 ib,u]				386,SB
IN		reg_al,reg_dx			[--:	ec]					8086
IN		reg_ax,reg_dx			[--:	o16 ed]					8086
IN		reg_eax,reg_dx			[--:	o32 ed]					386
INC		reg16				[r:	o16 40 embreg]				8086
INC		reg32			[r:	o32 40 embreg]				386
INC		rm8				[m:	hle fe /0]				8086,LOCK
INC		rm16			[m:	hle o16 ff /0]				8086,LOCK
INC		rm32			[m:	hle o32 ff /0]				386,LOCK
INSB		void			[	6c]						186
INSD		void			[	o32 6d]					386
INSW		void			[	o16 6d]					186
INT		imm				[i:	cd ib,u]				8086,SB
INT01		void			[	f1]						386,ND
INT1		void			[	f1]						386
INT03		void			[	cc]						8086,ND
INT3		void			[	cc]						8086
INTO		void			[	ce]						8086
INVD		void			[	0f 08]						486,PRIV
INVLPG		mem				[m:	0f 01 /7]					486,PRIV
IRET		void			[	odf cf]						8086
IRETD		void			[	o32 cf]						386
IRETW		void			[	o16 cf]						8086
JCXZ		imm				[i:	a16 e3 rel8]				8086
JECXZ		imm				[i:	a32 e3 rel8]				386
JMP		imm					[i:	jmp8 eb rel8]				8086,ND
JMP		imm					[i:	odf e9 rel]					8086,BND
JMP		imm16				[i:	o16 e9 rel]					8086,BND
JMP		imm32				[i:	o32 e9 rel]					386,BND
JMP		imm32				[i: o32 ea id iw]				386
JMP		rm16				[m:	o16 ff /4]					8086,BND
JMP		rm32				[m:	o32 ff /4]					386,BND
LAHF		void				[	9f]							8086
LAR		reg16,mem			[rm:	o16 0f 02 /r]				286,PROT,SW
LAR		reg16,reg16			[rm:	o16 0f 02 /r]				286,PROT
LAR		reg16,reg32			[rm:	o16 0f 02 /r]				386,PROT
LAR		reg32,mem			[rm:	o32 0f 02 /r]				386,PROT,SW
LAR		reg32,reg16			[rm:	o32 0f 02 /r]				386,PROT
LAR		reg32,reg32			[rm:	o32 0f 02 /r]				386,PROT
LDS		reg16,mem			[rm:	o16 c5 /r]				8086
LDS		reg32,mem			[rm:	o32 c5 /r]				386
LEA		reg16,mem			[rm:	o16 8d /r]				8086
LEA		reg32,mem			[rm:	o32 8d /r]				386
LEAVE		void				[	c9]					186
LES		reg16,mem			[rm:	o16 c4 /r]				8086
LES		reg32,mem			[rm:	o32 c4 /r]				386
LFS		reg16,mem			[rm:	o16 0f b4 /r]				386
LFS		reg32,mem			[rm:	o32 0f b4 /r]				386
LGDT		mem					[m:	0f 01 /2]				286,PRIV
LGS		reg16,mem			[rm:	o16 0f b5 /r]				386
LGS		reg32,mem			[rm:	o32 0f b5 /r]				386
LIDT		mem				[m:	0f 01 /3]				286,PRIV
LLDT		mem				[m:	0f 00 /2]				286,PROT,PRIV
LLDT		mem16			[m:	0f 00 /2]				286,PROT,PRIV
LLDT		reg16			[m:	0f 00 /2]				286,PROT,PRIV
LMSW		mem				[m:	0f 01 /6]				286,PRIV
LMSW		mem16			[m:	0f 01 /6]				286,PRIV
LMSW		reg16			[m:	0f 01 /6]				286,PRIV
LODSB		void			[	ac]					8086
LODSD		void			[	o32 ad]					386
LODSW		void			[	o16 ad]					8086
LOOP		imm				[i:	adf e2 rel8]				8086
LOOP		imm,reg_cx		[i-:	a16 e2 rel8]				8086
LOOP		imm,reg_ecx		[i-:	a32 e2 rel8]				386
LOOPE		imm				[i:	adf e1 rel8]				8086
LOOPE		imm,reg_cx		[i-:	a16 e1 rel8]				8086
LOOPE		imm,reg_ecx		[i-:	a32 e1 rel8]				386
LOOPNE		imm				[i:	adf e0 rel8]				8086
LOOPNE		imm,reg_cx		[i-:	a16 e0 rel8]				8086
LOOPNE		imm,reg_ecx		[i-:	a32 e0 rel8]				386
LOOPNZ		imm				[i:	adf e0 rel8]				8086
LOOPNZ		imm,reg_cx		[i-:	a16 e0 rel8]				8086
LOOPNZ		imm,reg_ecx		[i-:	a32 e0 rel8]				386
LOOPZ		imm				[i:	adf e1 rel8]				8086
LOOPZ		imm,reg_cx			[i-:	a16 e1 rel8]				8086
LOOPZ		imm,reg_ecx			[i-:	a32 e1 rel8]				386
LSL		reg16,mem			[rm:	o16 0f 03 /r]				286,PROT,SW
LSL		reg16,reg16			[rm:	o16 0f 03 /r]				286,PROT
LSL		reg16,reg32			[rm:	o16 0f 03 /r]				386,PROT
LSL		reg32,mem			[rm:	o32 0f 03 /r]				386,PROT,SW
LSL		reg32,reg16			[rm:	o32 0f 03 /r]				386,PROT
LSL		reg32,reg32			[rm:	o32 0f 03 /r]				386,PROT
LSS		reg16,mem			[rm:	o16 0f b2 /r]				386
LSS		reg32,mem			[rm:	o32 0f b2 /r]				386
LTR		mem					[m:	0f 00 /3]				286,PROT,PRIV
LTR		mem16				[m:	0f 00 /3]				286,PROT,PRIV
LTR		reg16				[m:	0f 00 /3]				286,PROT,PRIV
MOV		mem,reg_sreg			[mr:	8c /r]					8086,SW
MOV		reg16,reg_sreg			[mr:	o16 8c /r]				8086
MOV		reg32,reg_sreg			[mr:	o32 8c /r]				386
MOV		reg_sreg,mem			[rm:	8e /r]					8086,SW
MOV		reg_sreg,reg16			[rm:	8e /r]					8086,OPT,ND
MOV		reg_sreg,reg32			[rm:	8e /r]					386,OPT,ND
MOV		reg_sreg,reg16			[rm:	o16 8e /r]				8086
MOV		reg_sreg,reg32			[rm:	o32 8e /r]				386
MOV		reg_al,mem_offs			[-i:	a0 iwdq]				8086,SM
MOV		reg_ax,mem_offs			[-i:	o16 a1 iwdq]				8086,SM
MOV		reg_eax,mem_offs		[-i:	o32 a1 iwdq]				386,SM
MOV		mem_offs,reg_al			[i-:	a2 iwdq]				8086,SM,NOHLE
MOV		mem_offs,reg_ax			[i-:	o16 a3 iwdq]				8086,SM,NOHLE
MOV		mem_offs,reg_eax		[i-:	o32 a3 iwdq]				386,SM,NOHLE
MOV		reg32,reg_creg			[mr:	rex.l 0f 20 /r]				386,PRIV
MOV		reg_creg,reg32			[rm:	rex.l 0f 22 /r]				386,PRIV
MOV		reg32,reg_dreg			[mr:	0f 21 /r]				386,PRIV
MOV		reg_dreg,reg32			[rm:	0f 23 /r]				386,PRIV
MOV		reg32,reg_treg			[mr:	0f 24 /r]				386,ND
MOV		reg_treg,reg32			[rm:	0f 26 /r]				386,ND
MOV		mem,reg8			[mr:	hlexr 88 /r]				8086,SM
MOV		reg8,reg8			[mr:	88 /r]					8086
MOV		mem,reg16			[mr:	hlexr o16 89 /r]			8086,SM
MOV		reg16,reg16			[mr:	o16 89 /r]				8086
MOV		mem,reg32			[mr:	hlexr o32 89 /r]			386,SM
MOV		reg32,reg32			[mr:	o32 89 /r]				386
MOV		reg8,mem			[rm:	8a /r]					8086,SM
MOV		reg8,reg8			[rm:	8a /r]					8086
MOV		reg16,mem			[rm:	o16 8b /r]				8086,SM
MOV		reg16,reg16			[rm:	o16 8b /r]				8086
MOV		reg32,mem			[rm:	o32 8b /r]				386,SM
MOV		reg32,reg32			[rm:	o32 8b /r]				386
MOV		reg8,imm			[ri:	b0 embreg ib]				8086,SM
MOV		reg16,imm			[ri:	o16 b8 embreg iw]				8086,SM
MOV		reg32,imm			[ri:	o32 b8 embreg id]				386,SM
MOV		rm8,imm				[mi:	hlexr c6 /0 ib]				8086,SM
MOV		rm16,imm			[mi:	hlexr o16 c7 /0 iw]			8086,SM
MOV		rm32,imm			[mi:	hlexr o32 c7 /0 id]			386,SM
MOV		mem,imm8			[mi:	hlexr c6 /0 ib]				8086,SM
MOV		mem,imm16			[mi:	hlexr o16 c7 /0 iw]			8086,SM
MOV		mem,imm32			[mi:	hlexr o32 c7 /0 id]			386,SM
MOVSB		void				[	a4]					8086
MOVSD		void				[	o32 a5]					386
MOVSW		void				[	o16 a5]					8086
MOVSX		reg16,mem			[rm:	o16 0f be /r]				386,SB
MOVSX		reg16,reg8			[rm:	o16 0f be /r]				386
MOVSX		reg32,rm8			[rm:	o32 0f be /r]				386
MOVSX		reg32,rm16			[rm:	o32 0f bf /r]				386
MOVZX		reg16,mem			[rm:	o16 0f b6 /r]				386,SB
MOVZX		reg16,reg8			[rm:	o16 0f b6 /r]				386
MOVZX		reg32,rm8			[rm:	o32 0f b6 /r]				386
MOVZX		reg32,rm16			[rm:	o32 0f b7 /r]				386
MUL		rm8					[m:	f6 /4]					8086
MUL		rm16				[m:	o16 f7 /4]				8086
MUL		rm32				[m:	o32 f7 /4]				386
NEG		rm8					[m:	hle f6 /3]				8086,LOCK
NEG		rm16				[m:	hle o16 f7 /3]				8086,LOCK
NEG		rm32				[m:	hle o32 f7 /3]				386,LOCK
NOP		void				[	norexb nof3 90]				8086
NOT		rm8					[m:	hle f6 /2]				8086,LOCK
NOT		rm16				[m:	hle o16 f7 /2]				8086,LOCK
NOT		rm32				[m:	hle o32 f7 /2]				386,LOCK
OR		mem,reg8			[mr:	hle 08 /r]				8086,SM,LOCK
OR		reg8,reg8			[mr:	08 /r]					8086
OR		mem,reg16			[mr:	hle o16 09 /r]				8086,SM,LOCK
OR		reg16,reg16			[mr:	o16 09 /r]				8086
OR		mem,reg32			[mr:	hle o32 09 /r]				386,SM,LOCK
OR		reg32,reg32			[mr:	o32 09 /r]				386
OR		reg8,mem			[rm:	0a /r]					8086,SM
OR		reg8,reg8			[rm:	0a /r]					8086
OR		reg16,mem			[rm:	o16 0b /r]				8086,SM
OR		reg16,reg16			[rm:	o16 0b /r]				8086
OR		reg32,mem			[rm:	o32 0b /r]				386,SM
OR		reg32,reg32			[rm:	o32 0b /r]				386
OR		rm16,imm8			[mi:	hle o16 83 /1 ib,s]			8086,LOCK
OR		rm32,imm8			[mi:	hle o32 83 /1 ib,s]			386,LOCK
OR		reg_al,imm			[-i:	0c ib]					8086,SM
OR		reg_ax,sbyteword	[mi:	o16 83 /1 ib,s]				8086,SM,ND
OR		reg_ax,imm			[-i:	o16 0d iw]				8086,SM
OR		reg_eax,sbytedword	[mi:	o32 83 /1 ib,s]				386,SM,ND
OR		reg_eax,imm			[-i:	o32 0d id]				386,SM
OR		rm8,imm				[mi:	hle 80 /1 ib]				8086,SM,LOCK
OR		rm16,sbyteword		[mi:	hle o16 83 /1 ib,s]			8086,SM,LOCK,ND
OR		rm16,imm			[mi:	hle o16 81 /1 iw]			8086,SM,LOCK
OR		rm32,sbytedword		[mi:	hle o32 83 /1 ib,s]			386,SM,LOCK,ND
OR		rm32,imm			[mi:	hle o32 81 /1 id]			386,SM,LOCK
OR		mem,imm8			[mi:	hle 80 /1 ib]				8086,SM,LOCK
OR		mem,sbyteword16		[mi:	hle o16 83 /1 ib,s]			8086,SM,LOCK,ND
OR		mem,imm16			[mi:	hle o16 81 /1 iw]			8086,SM,LOCK
OR		mem,sbytedword32	[mi:	hle o32 83 /1 ib,s]			386,SM,LOCK,ND
OR		mem,imm32			[mi:	hle o32 81 /1 id]			386,SM,LOCK
OR		rm8,imm				[mi:	hle 82 /1 ib]				8086,SM,LOCK,ND
OUT		imm,reg_al			[i-:	e6 ib,u]				8086,SB,PRIV
OUT		imm,reg_ax			[i-:	o16 e7 ib,u]				8086,SB,PRIV
OUT		imm,reg_eax			[i-:	o32 e7 ib,u]				386,SB,PRIV
OUT		reg_dx,reg_al		[--:	ee]					8086,PRIV
OUT		reg_dx,reg_ax		[--:	o16 ef]					8086,PRIV
OUT		reg_dx,reg_eax		[--:	o32 ef]					386,PRIV
OUTSB		void				[	6e]					186,PRIV
OUTSD		void				[	o32 6f]					386,PRIV
OUTSW		void				[	o16 6f]					186,PRIV
PAUSE		void				[	f3i 90]					8086
POP		reg16				[r:	o16 58 embreg]				8086
POP		reg32				[r:	o32 58 embreg]				386
POP		rm16				[m:	o16 8f /0]				8086
POP		rm32				[m:	o32 8f /0]				386
POP		reg_es				[-:	07]					8086
POP		reg_ss				[-:	17]					8086
POP		reg_ds				[-:	1f]					8086
POP		reg_fs				[-:	0f a1]					386
POP		reg_gs				[-:	0f a9]					386
POPA		void				[	odf 61]					186
POPAD		void				[	o32 61]					386
POPAW		void				[	o16 61]					186
POPF		void				[	odf 9d]					8086
POPFD		void				[	o32 9d]					386
POPFW		void				[	o16 9d]					8086
PUSH		reg16				[r:	o16 50 embreg]				8086
PUSH		reg32				[r:	o32 50 embreg]				386
PUSH		rm16				[m:	o16 ff /6]				8086
PUSH		rm32				[m:	o32 ff /6]				386
PUSH		reg_es				[-:	06]					8086
PUSH		reg_cs				[-:	0e]					8086
PUSH		reg_ss				[-:	16]					8086
PUSH		reg_ds				[-:	1e]					8086
PUSH		reg_fs				[-:	0f a0]					386
PUSH		reg_gs				[-:	0f a8]					386
PUSH		imm8				[i:	6a ib,s]					186
PUSH		sbyteword16			[i:	o16 6a ib,s]				186,AR0,SIZE,ND
PUSH		imm16				[i:	o16 68 iw]				186,AR0,SIZE
PUSH		sbytedword32			[i:	o32 6a ib,s]				386,AR0,SIZE,ND
PUSH		imm32				[i:	o32 68 id]				386,AR0,SIZE
PUSH		sbytedword32			[i:	o32 6a ib,s]				386,SD,ND
PUSH		imm32				[i:	o32 68 id]				386,SD
PUSHA		void				[	odf 60]					186
PUSHAD		void				[	o32 60]					386
PUSHAW		void				[	o16 60]					186
PUSHF		void				[	odf 9c]					8086
PUSHFD		void				[	o32 9c]					386
PUSHFW		void				[	o16 9c]					8086
RCL		rm8,unity			[m-:	d0 /2]					8086
RCL		rm8,reg_cl			[m-:	d2 /2]					8086
RCL		rm8,imm8			[mi:	c0 /2 ib,u]				186
RCL		rm16,unity			[m-:	o16 d1 /2]				8086
RCL		rm16,reg_cl			[m-:	o16 d3 /2]				8086
RCL		rm16,imm8			[mi:	o16 c1 /2 ib,u]				186
RCL		rm32,unity			[m-:	o32 d1 /2]				386
RCL		rm32,reg_cl			[m-:	o32 d3 /2]				386
RCL		rm32,imm8			[mi:	o32 c1 /2 ib,u]				386
RCR		rm8,unity			[m-:	d0 /3]					8086
RCR		rm8,reg_cl			[m-:	d2 /3]					8086
RCR		rm8,imm8			[mi:	c0 /3 ib,u]				186
RCR		rm16,unity			[m-:	o16 d1 /3]				8086
RCR		rm16,reg_cl			[m-:	o16 d3 /3]				8086
RCR		rm16,imm8			[mi:	o16 c1 /3 ib,u]				186
RCR		rm32,unity			[m-:	o32 d1 /3]				386
RCR		rm32,reg_cl			[m-:	o32 d3 /3]				386
RCR		rm32,imm8			[mi:	o32 c1 /3 ib,u]				386
RDMSR		void				[	0f 32]					PENT,PRIV
RDTSC		void				[	0f 31]					PENT
RET		void				[	c3]					8086,BND
RET		imm				[i:	c2 iw]					8086,SW,BND
RETF		void				[	cb]					8086
RETF		imm				[i:	ca iw]					8086,SW
RETN		void				[	c3]					8086,BND
RETN		imm				[i:	c2 iw]					8086,SW,BND
ROL		rm8,unity			[m-:	d0 /0]					8086
ROL		rm8,reg_cl			[m-:	d2 /0]					8086
ROL		rm8,imm8			[mi:	c0 /0 ib,u]				186
ROL		rm16,unity			[m-:	o16 d1 /0]				8086
ROL		rm16,reg_cl			[m-:	o16 d3 /0]				8086
ROL		rm16,imm8			[mi:	o16 c1 /0 ib,u]				186
ROL		rm32,unity			[m-:	o32 d1 /0]				386
ROL		rm32,reg_cl			[m-:	o32 d3 /0]				386
ROL		rm32,imm8			[mi:	o32 c1 /0 ib,u]				386
ROR		rm8,unity			[m-:	d0 /1]					8086
ROR		rm8,reg_cl			[m-:	d2 /1]					8086
ROR		rm8,imm8			[mi:	c0 /1 ib,u]				186
ROR		rm16,unity			[m-:	o16 d1 /1]				8086
ROR		rm16,reg_cl			[m-:	o16 d3 /1]				8086
ROR		rm16,imm8			[mi:	o16 c1 /1 ib,u]				186
ROR		rm32,unity			[m-:	o32 d1 /1]				386
ROR		rm32,reg_cl			[m-:	o32 d3 /1]				386
ROR		rm32,imm8			[mi:	o32 c1 /1 ib,u]				386
SAHF		void				[	9e]					8086
SAL		rm8,unity			[m-:	d0 /4]					8086,ND
SAL		rm8,reg_cl			[m-:	d2 /4]					8086,ND
SAL		rm8,imm8			[mi:	c0 /4 ib,u]				186,ND
SAL		rm16,unity			[m-:	o16 d1 /4]				8086,ND
SAL		rm16,reg_cl			[m-:	o16 d3 /4]				8086,ND
SAL		rm16,imm8			[mi:	o16 c1 /4 ib,u]				186,ND
SAL		rm32,unity			[m-:	o32 d1 /4]				386,ND
SAL		rm32,reg_cl			[m-:	o32 d3 /4]				386,ND
SAL		rm32,imm8			[mi:	o32 c1 /4 ib,u]				386,ND
SAR		rm8,unity			[m-:	d0 /7]					8086
SAR		rm8,reg_cl			[m-:	d2 /7]					8086
SAR		rm8,imm8			[mi:	c0 /7 ib,u]				186
SAR		rm16,unity			[m-:	o16 d1 /7]				8086
SAR		rm16,reg_cl			[m-:	o16 d3 /7]				8086
SAR		rm16,imm8			[mi:	o16 c1 /7 ib,u]				186
SAR		rm32,unity			[m-:	o32 d1 /7]				386
SAR		rm32,reg_cl			[m-:	o32 d3 /7]				386
SAR		rm32,imm8			[mi:	o32 c1 /7 ib,u]				386
SBB		mem,reg8			[mr:	hle 18 /r]				8086,SM,LOCK
SBB		reg8,reg8			[mr:	18 /r]					8086
SBB		mem,reg16			[mr:	hle o16 19 /r]				8086,SM,LOCK
SBB		reg16,reg16			[mr:	o16 19 /r]				8086
SBB		mem,reg32			[mr:	hle o32 19 /r]				386,SM,LOCK
SBB		reg32,reg32			[mr:	o32 19 /r]				386
SBB		reg8,mem			[rm:	1a /r]					8086,SM
SBB		reg8,reg8			[rm:	1a /r]					8086
SBB		reg16,mem			[rm:	o16 1b /r]				8086,SM
SBB		reg16,reg16			[rm:	o16 1b /r]				8086
SBB		reg32,mem			[rm:	o32 1b /r]				386,SM
SBB		reg32,reg32			[rm:	o32 1b /r]				386
SBB		rm16,imm8			[mi:	hle o16 83 /3 ib,s]			8086,LOCK
SBB		rm32,imm8			[mi:	hle o32 83 /3 ib,s]			386,LOCK
SBB		reg_al,imm			[-i:	1c ib]					8086,SM
SBB		reg_ax,sbyteword		[mi:	o16 83 /3 ib,s]				8086,SM,ND
SBB		reg_ax,imm			[-i:	o16 1d iw]				8086,SM
SBB		reg_eax,sbytedword		[mi:	o32 83 /3 ib,s]				386,SM,ND
SBB		reg_eax,imm			[-i:	o32 1d id]				386,SM
SBB		rm8,imm				[mi:	hle 80 /3 ib]				8086,SM,LOCK
SBB		rm16,sbyteword			[mi:	hle o16 83 /3 ib,s]			8086,SM,LOCK,ND
SBB		rm16,imm			[mi:	hle o16 81 /3 iw]			8086,SM,LOCK
SBB		rm32,sbytedword			[mi:	hle o32 83 /3 ib,s]			386,SM,LOCK,ND
SBB		rm32,imm			[mi:	hle o32 81 /3 id]			386,SM,LOCK
SBB		mem,imm8			[mi:	hle 80 /3 ib]				8086,SM,LOCK
SBB		mem,sbyteword16			[mi:	hle o16 83 /3 ib,s]			8086,SM,LOCK,ND
SBB		mem,imm16			[mi:	hle o16 81 /3 iw]			8086,SM,LOCK
SBB		mem,sbytedword32		[mi:	hle o32 83 /3 ib,s]			386,SM,LOCK,ND
SBB		mem,imm32			[mi:	hle o32 81 /3 id]			386,SM,LOCK
SBB		rm8,imm				[mi:	hle 82 /3 ib]				8086,SM,LOCK,ND
SCASB		void				[	repe ae]				8086
SCASD		void				[	repe o32 af]				386
SCASW		void				[	repe o16 af]				8086
SGDT		mem				[m:	0f 01 /0]				286
SHL		rm8,unity			[m-:	d0 /4]					8086
SHL		rm8,reg_cl			[m-:	d2 /4]					8086
SHL		rm8,imm8			[mi:	c0 /4 ib,u]				186
SHL		rm16,unity			[m-:	o16 d1 /4]				8086
SHL		rm16,reg_cl			[m-:	o16 d3 /4]				8086
SHL		rm16,imm8			[mi:	o16 c1 /4 ib,u]				186
SHL		rm32,unity			[m-:	o32 d1 /4]				386
SHL		rm32,reg_cl			[m-:	o32 d3 /4]				386
SHL		rm32,imm8			[mi:	o32 c1 /4 ib,u]				386
SHLD		mem,reg16,imm			[mri:	o16 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		reg16,reg16,imm			[mri:	o16 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		mem,reg32,imm			[mri:	o32 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		reg32,reg32,imm			[mri:	o32 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		mem,reg16,reg_cl		[mr-:	o16 0f a5 /r]				386,SM
SHLD		reg16,reg16,reg_cl		[mr-:	o16 0f a5 /r]				386
SHLD		mem,reg32,reg_cl		[mr-:	o32 0f a5 /r]				386,SM
SHLD		reg32,reg32,reg_cl		[mr-:	o32 0f a5 /r]				386
SHR		rm8,unity			[m-:	d0 /5]					8086
SHR		rm8,reg_cl			[m-:	d2 /5]					8086
SHR		rm8,imm8			[mi:	c0 /5 ib,u]				186
SHR		rm16,unity			[m-:	o16 d1 /5]				8086
SHR		rm16,reg_cl			[m-:	o16 d3 /5]				8086
SHR		rm16,imm8			[mi:	o16 c1 /5 ib,u]				186
SHR		rm32,unity			[m-:	o32 d1 /5]				386
SHR		rm32,reg_cl			[m-:	o32 d3 /5]				386
SHR		rm32,imm8			[mi:	o32 c1 /5 ib,u]				386
SHRD		mem,reg16,imm			[mri:	o16 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		reg16,reg16,imm			[mri:	o16 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		mem,reg32,imm			[mri:	o32 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		reg32,reg32,imm			[mri:	o32 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		mem,reg16,reg_cl		[mr-:	o16 0f ad /r]				386,SM
SHRD		reg16,reg16,reg_cl		[mr-:	o16 0f ad /r]				386
SHRD		mem,reg32,reg_cl		[mr-:	o32 0f ad /r]				386,SM
SHRD		reg32,reg32,reg_cl		[mr-:	o32 0f ad /r]				386
SIDT		mem				[m:	0f 01 /1]				286
SLDT		mem				[m:	0f 00 /0]				286
SLDT		mem16				[m:	0f 00 /0]				286
SLDT		reg16				[m:	o16 0f 00 /0]				286
SLDT		reg32				[m:	o32 0f 00 /0]				386
SMSW		mem				[m:	0f 01 /4]				286
SMSW		mem16				[m:	0f 01 /4]				286
SMSW		reg16				[m:	o16 0f 01 /4]				286
SMSW		reg32				[m:	o32 0f 01 /4]				386
STC		void				[	f9]					8086
STD		void				[	fd]					8086
STI		void				[	fb]					8086
STOSB		void				[	aa]					8086
STOSD		void				[	o32 ab]					386
STOSW		void				[	o16 ab]					8086
STR		mem				[m:	0f 00 /1]				286,PROT
STR		mem16				[m:	0f 00 /1]				286,PROT
STR		reg16				[m:	o16 0f 00 /1]				286,PROT
STR		reg32				[m:	o32 0f 00 /1]				386,PROT
SUB		mem,reg8			[mr:	hle 28 /r]				8086,SM,LOCK
SUB		reg8,reg8			[mr:	28 /r]					8086
SUB		mem,reg16			[mr:	hle o16 29 /r]				8086,SM,LOCK
SUB		reg16,reg16			[mr:	o16 29 /r]				8086
SUB		mem,reg32			[mr:	hle o32 29 /r]				386,SM,LOCK
SUB		reg32,reg32			[mr:	o32 29 /r]				386
SUB		reg8,mem			[rm:	2a /r]					8086,SM
SUB		reg8,reg8			[rm:	2a /r]					8086
SUB		reg16,mem			[rm:	o16 2b /r]				8086,SM
SUB		reg16,reg16			[rm:	o16 2b /r]				8086
SUB		reg32,mem			[rm:	o32 2b /r]				386,SM
SUB		reg32,reg32			[rm:	o32 2b /r]				386
SUB		rm16,imm8			[mi:	hle o16 83 /5 ib,s]			8086,LOCK
SUB		rm32,imm8			[mi:	hle o32 83 /5 ib,s]			386,LOCK
SUB		reg_al,imm			[-i:	2c ib]					8086,SM
SUB		reg_ax,sbyteword		[mi:	o16 83 /5 ib,s]				8086,SM,ND
SUB		reg_ax,imm			[-i:	o16 2d iw]				8086,SM
SUB		reg_eax,sbytedword		[mi:	o32 83 /5 ib,s]				386,SM,ND
SUB		reg_eax,imm			[-i:	o32 2d id]				386,SM
SUB		rm8,imm				[mi:	hle 80 /5 ib]				8086,SM,LOCK
SUB		rm16,sbyteword			[mi:	hle o16 83 /5 ib,s]			8086,SM,LOCK,ND
SUB		rm16,imm			[mi:	hle o16 81 /5 iw]			8086,SM,LOCK
SUB		rm32,sbytedword			[mi:	hle o32 83 /5 ib,s]			386,SM,LOCK,ND
SUB		rm32,imm			[mi:	hle o32 81 /5 id]			386,SM,LOCK
SUB		mem,imm8			[mi:	hle 80 /5 ib]				8086,SM,LOCK
SUB		mem,sbyteword16			[mi:	hle o16 83 /5 ib,s]			8086,SM,LOCK,ND
SUB		mem,imm16			[mi:	hle o16 81 /5 iw]			8086,SM,LOCK
SUB		mem,sbytedword32		[mi:	hle o32 83 /5 ib,s]			386,SM,LOCK,ND
SUB		mem,imm32			[mi:	hle o32 81 /5 id]			386,SM,LOCK
SUB		rm8,imm					[mi:	hle 82 /5 ib]				8086,SM,LOCK,ND
TEST		mem,reg8			[mr:	84 /r]					8086,SM
TEST		reg8,reg8			[mr:	84 /r]					8086
TEST		mem,reg16			[mr:	o16 85 /r]				8086,SM
TEST		reg16,reg16			[mr:	o16 85 /r]				8086
TEST		mem,reg32			[mr:	o32 85 /r]				386,SM
TEST		reg32,reg32			[mr:	o32 85 /r]				386
TEST		reg8,mem			[rm:	84 /r]					8086,SM
TEST		reg16,mem			[rm:	o16 85 /r]				8086,SM
TEST		reg32,mem			[rm:	o32 85 /r]				386,SM
TEST		reg_al,imm			[-i:	a8 ib]					8086,SM
TEST		reg_ax,imm			[-i:	o16 a9 iw]				8086,SM
TEST		reg_eax,imm			[-i:	o32 a9 id]				386,SM
TEST		rm8,imm				[mi:	f6 /0 ib]				8086,SM
TEST		rm16,imm			[mi:	o16 f7 /0 iw]				8086,SM
TEST		rm32,imm			[mi:	o32 f7 /0 id]				386,SM
TEST		mem,imm8			[mi:	f6 /0 ib]				8086,SM
TEST		mem,imm16			[mi:	o16 f7 /0 iw]				8086,SM
TEST		mem,imm32			[mi:	o32 f7 /0 id]				386,SM
UD2		void				[	0f 0b]					186
UD2A		void				[	0f 0b]					186,ND
VERR		mem					[m:	0f 00 /4]				286,PROT
VERR		mem16				[m:	0f 00 /4]				286,PROT
VERR		reg16				[m:	0f 00 /4]				286,PROT
VERW		mem					[m:	0f 00 /5]				286,PROT
VERW		mem16				[m:	0f 00 /5]				286,PROT
VERW		reg16				[m:	0f 00 /5]				286,PROT
FWAIT		void				[	9b]					8086
WBINVD		void				[	0f 09]					486,PRIV
WRMSR		void				[	0f 30]					PENT,PRIV
XADD		mem,reg8			[mr:	hle 0f c0 /r]				486,SM,LOCK
XADD		reg8,reg8			[mr:	0f c0 /r]				486
XADD		mem,reg16			[mr:	hle o16 0f c1 /r]			486,SM,LOCK
XADD		reg16,reg16			[mr:	o16 0f c1 /r]				486
XADD		mem,reg32			[mr:	hle o32 0f c1 /r]			486,SM,LOCK
XADD		reg32,reg32			[mr:	o32 0f c1 /r]				486
XCHG		reg_ax,reg16		[-r:	o16 90 embreg]				8086
XCHG		reg_eax,reg32na		[-r:	o32 90 embreg]				386
XCHG		reg16,reg_ax		[r-:	o16 90 embreg]				8086
XCHG		reg32na,reg_eax		[r-:	o32 90 embreg]				386
XCHG		reg_eax,reg_eax		[--:	o32 90]					386
XCHG		reg8,mem			[rm:	hlenl 86 /r]				8086,SM,LOCK
XCHG		reg8,reg8			[rm:	86 /r]					8086
XCHG		reg16,mem			[rm:	hlenl o16 87 /r]			8086,SM,LOCK
XCHG		reg16,reg16			[rm:	o16 87 /r]				8086
XCHG		reg32,mem			[rm:	hlenl o32 87 /r]			386,SM,LOCK
XCHG		reg32,reg32			[rm:	o32 87 /r]				386
XCHG		mem,reg8			[mr:	hlenl 86 /r]				8086,SM,LOCK
XCHG		reg8,reg8			[mr:	86 /r]					8086
XCHG		mem,reg16			[mr:	hlenl o16 87 /r]			8086,SM,LOCK
XCHG		reg16,reg16			[mr:	o16 87 /r]				8086
XCHG		mem,reg32			[mr:	hlenl o32 87 /r]			386,SM,LOCK
XCHG		reg32,reg32			[mr:	o32 87 /r]				386
XLATB		void				[	d7]					8086
XLAT		void				[	d7]					8086
XOR		mem,reg8			[mr:	hle 30 /r]				8086,SM,LOCK
XOR		reg8,reg8			[mr:	30 /r]					8086
XOR		mem,reg16			[mr:	hle o16 31 /r]				8086,SM,LOCK
XOR		reg16,reg16			[mr:	o16 31 /r]				8086
XOR		mem,reg32			[mr:	hle o32 31 /r]				386,SM,LOCK
XOR		reg32,reg32			[mr:	o32 31 /r]				386
XOR		reg8,mem			[rm:	32 /r]					8086,SM
XOR		reg8,reg8			[rm:	32 /r]					8086
XOR		reg16,mem			[rm:	o16 33 /r]				8086,SM
XOR		reg16,reg16			[rm:	o16 33 /r]				8086
XOR		reg32,mem			[rm:	o32 33 /r]				386,SM
XOR		reg32,reg32			[rm:	o32 33 /r]				386
XOR		rm16,imm8			[mi:	hle o16 83 /6 ib,s]			8086,LOCK
XOR		rm32,imm8			[mi:	hle o32 83 /6 ib,s]			386,LOCK
XOR		reg_al,imm			[-i:	34 ib]					8086,SM
XOR		reg_ax,sbyteword		[mi:	o16 83 /6 ib,s]				8086,SM,ND
XOR		reg_ax,imm			[-i:	o16 35 iw]				8086,SM
XOR		reg_eax,sbytedword		[mi:	o32 83 /6 ib,s]				386,SM,ND
XOR		reg_eax,imm			[-i:	o32 35 id]				386,SM
XOR		rm8,imm				[mi:	hle 80 /6 ib]				8086,SM,LOCK
XOR		rm16,sbyteword			[mi:	hle o16 83 /6 ib,s]			8086,SM,LOCK,ND
XOR		rm16,imm			[mi:	hle o16 81 /6 iw]			8086,SM,LOCK
XOR		rm32,sbytedword			[mi:	hle o32 83 /6 ib,s]			386,SM,LOCK,ND
XOR		rm32,imm			[mi:	hle o32 81 /6 id]			386,SM,LOCK
XOR		mem,imm8			[mi:	hle 80 /6 ib]				8086,SM,LOCK
XOR		mem,sbyteword16			[mi:	hle o16 83 /6 ib,s]			8086,SM,LOCK,ND
XOR		mem,imm16			[mi:	hle o16 81 /6 iw]			8086,SM,LOCK
XOR		mem,sbytedword32		[mi:	hle o32 83 /6 ib,s]			386,SM,LOCK,ND
XOR		mem,imm32			[mi:	hle o32 81 /6 id]			386,SM,LOCK
XOR		rm8,imm				[mi:	hle 82 /6 ib]				8086,SM,LOCK,ND
JO		imms8				[70 ib]						8086
JNO		imms8				[71 ib]						8086
JB		imms8				[72 ib]						8086
JNAE		imms8				[72 ib]						8086
JC		imms8				[72 ib]						8086
JNB		imms8				[73 ib]						8086
JAE		imms8				[73 ib]						8086
JNC		imms8				[73 ib]						8086
JZ		imms8				[74 ib]						8086
JE		imms8				[74 ib]						8086
JNZ		imms8				[75 ib]						8086
JNE		imms8				[75 ib]						8086
JBE		imms8				[76 ib]						8086
JNA		imms8				[76 ib]						8086
JNBE		imms8				[77 ib]						8086
JA		imms8				[77 ib]						8086
JS		imms8				[78 ib]						8086
JNS		imms8				[79 ib]						8086
JP		imms8				[7A ib]						8086
JPE		imms8				[7A ib]						8086
JNP		imms8				[7B ib]						8086
JPO		imms8				[7B ib]						8086
JL		imms8				[7C ib]						8086
JNGE		imms8				[7C ib]						8086
JNL		imms8				[7D ib]						8086
JGE		imms8				[7D ib]						8086
JLE		imms8				[7E ib]						8086
JNG		imms8				[7E ib]						8086
JNLE		imms8				[7F ib]						8086
JG		imms8				[7F ib]						8086

JO		immsw				[0f 80 iw]					8086
JNO		immsw				[0f 81 iw]					8086
JB		immsw				[0f 82 iw]					8086
JNAE		immsw				[0f 82 iw]					8086
JC		immsw				[0f 82 iw]					8086
JNB		immsw				[0f 83 iw]					8086
JAE		immsw				[0f 83 iw]					8086
JNC		immsw				[0f 83 iw]					8086
JZ		immsw				[0f 84 iw]					8086
JE		immsw				[0f 84 iw]					8086
JNZ		immsw				[0f 85 iw]					8086
JNE		immsw				[0f 85 iw]					8086
JBE		immsw				[0f 86 iw]					8086
JNA		immsw				[0f 86 iw]					8086
JNBE		immsw				[0f 87 iw]					8086
JA		immsw				[0f 87 iw]					8086
JS		immsw				[0f 88 iw]					8086
JNS		immsw				[0f 89 iw]					8086
JP		immsw				[0f 8A iw]					8086
JPE		immsw				[0f 8A iw]					8086
JNP		immsw				[0f 8B iw]					8086
JPO		immsw				[0f 8B iw]					8086
JL		immsw				[0f 8C iw]					8086
JNGE		immsw				[0f 8C iw]					8086
JNL		immsw				[0f 8D iw]					8086
JGE		immsw				[0f 8D iw]					8086
JLE		immsw				[0f 8E iw]					8086
JNG		immsw				[0f 8E iw]					8086
JNLE		immsw				[0f 8F iw]					8086
JG		immsw				[0f 8F iw]					8086

SETO		mem				[rm:	0f 90]					386
SETO		reg8			[rm:	0f 90]					386
SETNO		mem				[rm:	0f 91]					386
SETNO		reg8			[rm:	0f 91]					386
SETB		mem				[rm:	0f 92]					386
SETB		reg8			[rm:	0f 92]					386
SETNAE		mem				[rm:	0f 92]					386
SETNAE		reg8			[rm:	0f 92]					386
SETС		mem				[rm:	0f 92]					386
SETС		reg8			[rm:	0f 92]					386
SETNB		mem				[rm:	0f 93]					386
SETNB		reg8			[rm:	0f 93]					386
SETAE		mem				[rm:	0f 93]					386
SETAE		reg8			[rm:	0f 93]					386
SETNC		mem				[rm:	0f 93]					386
SETNC		reg8			[rm:	0f 93]					386
SETZ		mem				[rm:	0f 94]					386
SETZ		reg8			[rm:	0f 94]					386
SETE		mem				[rm:	0f 94]					386
SETE		reg8			[rm:	0f 94]					386
SETNZ		mem				[rm:	0f 95]					386
SETNZ		reg8			[rm:	0f 95]					386
SETNE		mem				[rm:	0f 95]					386
SETNE		reg8			[rm:	0f 95]					386
SETBE		mem				[rm:	0f 96]					386
SETBE		reg8			[rm:	0f 96]					386
SETNA		mem				[rm:	0f 96]					386
SETNA		reg8			[rm:	0f 96]					386
SETNBE		mem				[rm:	0f 97]					386
SETNBE		reg8			[rm:	0f 97]					386
SETA		mem				[rm:	0f 97]					386
SETA		reg8			[rm:	0f 97]					386
SETS		mem				[rm:	0f 98]					386
SETS		reg8			[rm:	0f 98]					386
SETNS		mem				[rm:	0f 99]					386
SETNS		reg8			[rm:	0f 99]					386
SETP		mem				[rm:	0f 9A]					386
SETP		reg8			[rm:	0f 9A]					386
SETPE		mem				[rm:	0f 9A]					386
SETPE		reg8			[rm:	0f 9A]					386
SETNP		mem				[rm:	0f 9B]					386
SETNP		reg8			[rm:	0f 9B]					386
SETPO		mem				[rm:	0f 9B]					386
SETPO		reg8			[rm:	0f 9B]					386
SETL		mem				[rm:	0f 9C]					386
SETL		reg8			[rm:	0f 9C]					386
SETNGE		mem				[rm:	0f 9C]					386
SETNGE		reg8			[rm:	0f 9C]					386
SETNL		mem				[rm:	0f 9D]					386
SETNL		reg8			[rm:	0f 9D]					386
SETGE		mem				[rm:	0f 9D]					386
SETGE		reg8			[rm:	0f 9D]					386
SETLE		mem				[rm:	0f 9E]					386
SETLE		reg8			[rm:	0f 9E]					386
SETNG		mem				[rm:	0f 9E]					386
SETNG		reg8			[rm:	0f 9E]					386
SETNLE		mem				[rm:	0f 9F]					386
SETNLE		reg8			[rm:	0f 9F]					386
SETG		mem				[rm:	0f 9F]					386
SETG		reg8			[rm:	0f 9F]					386