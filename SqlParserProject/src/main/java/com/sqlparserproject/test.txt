DROP TABLE IF EXISTS tmp_request_daily_audits_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_daily_audits_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT audit_sid
         FROM fact_raw_http
        WHERE date_id = ?VAR:date_id?
          AND audit_sid IN (SELECT audit_sid
                              FROM dim_audit
                             WHERE process_id in ( ?PARAMETER:Topology_Identifiers_HTTP? )
                               AND status = 1)
        GROUP BY audit_sid;

        
        
        
        
        
DROP TABLE IF EXISTS tmp_request_unksubs_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unksubs_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT raw_msisdn, raw_apn, raw_imsi, sub_opnet_sid
       FROM (
              SELECT raw_msisdn,
              MAX(raw_apn) AS raw_apn,
                     MAX(raw_imsi) AS raw_imsi,
                     MAX(sub_opnet_sid) AS sub_opnet_sid 
                FROM fact_raw_http f
                    LEFT OUTER JOIN dim_media_sby dm
                            ON f.pattern_sid = dm.pattern_sid
               WHERE date_id = ?VAR:date_id?
                 AND (dm.pattern_type = ''Application'' OR pv_mask IN (?PARAMETER:CIMXM_REQUEST_AGG_PV_MASK?)) 
                 AND (dm.pattern_sid IS NULL OR dm.media_category_name != ''Promotional Servers'') 
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
               GROUP BY raw_msisdn
            ) fs
      WHERE NOT EXISTS (SELECT * FROM dim_subscriber dsub WHERE fs.raw_msisdn = dsub.msisdn AND dsub.active = ''Y'');

      
      
      
      
      
DROP TABLE IF EXISTS tmp_request_unkapn_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unkapn_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT fs.apn_sid, fs.raw_apn
       FROM (
              SELECT apn_sid,
                     SUBSTR(raw_apn,1,100) as raw_apn
                FROM fact_raw_http f
               WHERE date_id = ?VAR:date_id?
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
               GROUP BY apn_sid, raw_apn
            ) fs
      WHERE NOT EXISTS (SELECT * FROM dim_apn dapn WHERE fs.apn_sid = dapn.apn_sid);



DROP TABLE IF EXISTS tmp_request_unkggsn_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unkggsn_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT fs.ggsn_sid, fs.raw_ggsn_ip, fs.raw_ggsn_name
       FROM (
              SELECT ggsn_sid, 
                     SUBSTR(raw_ggsn_ip,1,20) as raw_ggsn_ip,
                     SUBSTR(raw_ggsn_name,1,32) as raw_ggsn_name
                FROM fact_raw_http f
               WHERE date_id = ?VAR:date_id?
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
               GROUP BY ggsn_sid, raw_ggsn_ip, raw_ggsn_name
            ) fs
      WHERE NOT EXISTS (SELECT * FROM dim_ggsn dggsn WHERE fs.ggsn_sid = dggsn.ggsn_sid);

DROP TABLE IF EXISTS tmp_request_unkprobe_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unkprobe_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT fs.probe_sid, fs.raw_probe_name
       FROM (
              SELECT probe_sid, 
                     substr(raw_probe_name,1,100) as raw_probe_name
                FROM fact_raw_http f
               WHERE date_id = ?VAR:date_id?
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
               GROUP BY probe_sid, raw_probe_name
            ) fs
      WHERE NOT EXISTS (SELECT * FROM dim_probe dprb WHERE fs.probe_sid = dprb.probe_sid);
      
DROP TABLE IF EXISTS tmp_request_unkopnet_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unkopnet_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT fs.opnetwork_sid,
            HASH(MAX(fs.display_name)) AS opnet_unique_sid,
            fs.is_domestic,
            MAX(fs.seen_in_traffic)=1 AS seen_in_traffic,
            fs.mcc_code,
            fs.mnc_code,
            MAX(fs.display_name) AS display_name
      FROM (
            SELECT DISTINCT
                   sub_opnet_sid AS opnetwork_sid,
                   CASE WHEN SUBSTR(sub_opnet_sid::VARCHAR(10),2,3)::INT = ?PARAMETER:country_mcc? THEN TRUE ELSE FALSE END AS is_domestic,
                   0 AS seen_in_traffic,
                   SUBSTR(sub_opnet_sid::VARCHAR(10),2,3)::INT AS mcc_code,
                   SUBSTR(sub_opnet_sid::VARCHAR(10),5,3)::INT AS mnc_code,
                   ''{Unknown-PLMN:'' || raw_imsi_plmn || ''}'' AS display_name
              FROM fact_raw_http f
             WHERE date_id = ?VAR:date_id?
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
            UNION
            SELECT DISTINCT
                   carrier_opnet_sid AS opnetwork_sid,
                   CASE WHEN SUBSTR(carrier_opnet_sid::VARCHAR(10),2,3)::INT = ?PARAMETER:country_mcc? THEN TRUE ELSE FALSE END AS is_domestic,
                   1 AS seen_in_traffic,
                    SUBSTR(carrier_opnet_sid::VARCHAR(10),2,3)::INT AS mcc_code,
                   SUBSTR(carrier_opnet_sid::VARCHAR(10),5,3)::INT AS mnc_code,
                   ''{Unknown-PLMN:'' || raw_sgsn_plmn || ''}'' AS display_name
              FROM fact_raw_http f
             WHERE date_id = ?VAR:date_id?
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
            ) fs
       WHERE NOT EXISTS (SELECT * FROM dim_operator_network dopn WHERE fs.opnetwork_sid = dopn.opnetwork_sid)
       GROUP BY fs.opnetwork_sid,
                fs.is_domestic,
                fs.mcc_code,
                fs.mnc_code;

DROP TABLE IF EXISTS tmp_request_unktac_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unktac_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT fs.tac_code_sid
       FROM (
              SELECT tac_code_sid
                FROM fact_raw_http f
               WHERE date_id = ?VAR:date_id?
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
               GROUP BY tac_code_sid
            ) fs
       WHERE NOT EXISTS (SELECT * FROM dim_tac dtac WHERE fs.tac_code_sid = dtac.tac_code_sid);

DROP TABLE IF EXISTS tmp_request_unkloc_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unkloc_?VAR:date_id? ON COMMIT PRESERVE ROWS
    AS SELECT fs.location_id, fs.carrier_opnet_sid, fs.raw_lac, fs.raw_ci
       FROM (
              SELECT location_id, 
                     MAX(carrier_opnet_sid) AS carrier_opnet_sid,
                     MAX(raw_lac) AS raw_lac,
                     MAX(raw_ci) AS raw_ci
                FROM fact_raw_http f
               WHERE date_id = ?VAR:date_id?
                 AND carrier_opnet_sid IN ( ?PARAMETER:home_plmn_list? )
                 AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
               GROUP BY location_id
            ) fs
       WHERE NOT EXISTS (SELECT * FROM dim_network dn WHERE fs.location_id = dn.location_id AND dn.active = 1);


    INSERT INTO dim_subscriber (subscriber_sid, sub_unique_sid, customer_id, multisim_flag, name, msisdn, msisdn_masked, billing_type, subscriber_type, tariff_plan_sid, gender, age, age_range, segment, zipcode, status, customer_value, customer_value_range, dealer_device_sid, dealer_sim_sid, employee_ind, marital_status, birthdate, tariff_plan_eff_date, language, mvno, account_id, account_name, account_type, corp_id, corp_name, opt_out, home_opnetwork_sid, city, province, region, country, segment_2, date_created, active, date_start_id, date_first_transaction, date_last_transaction, date_first_call, date_last_call, date_first_sms, date_last_sms, date_first_crm, date_last_crm, date_end_id, billing_cycle, convergence_type, curr_tac_code_sid, curr_device_os_version_sid, rec_type, imsi, loyalty_sid, option_group_sid, last_imei, last_tac, activation_date, deactivation_date, contract_start_date, contract_end_date, hash_type1, hash_type2, sub_id, credit_rating_norm, credit_rating_desc, credit_delinq_amount, restrict_ind, integer_col_1, integer_col_2, integer_col_3, integer_col_4, integer_col_5, integer_col_6, integer_col_7, integer_col_8, integer_col_9, integer_col_10, integer_col_11, integer_col_12, integer_col_13, integer_col_14, integer_col_15, integer_col_16, integer_col_17, integer_col_18, integer_col_19, integer_col_20, integer_col_21, integer_col_22, integer_col_23, integer_col_24, integer_col_25, integer_col_26, integer_col_27, integer_col_28, integer_col_29, integer_col_30, varchar_col_1, varchar_col_2, varchar_col_3, varchar_col_4, varchar_col_5, varchar_col_6, varchar_col_7, varchar_col_8, varchar_col_9, varchar_col_10, varchar_col_11, varchar_col_12, varchar_col_13, varchar_col_14, varchar_col_15, varchar_col_16, varchar_col_17, varchar_col_18, varchar_col_19, varchar_col_20, varchar_col_21, varchar_col_22, varchar_col_23, varchar_col_24, varchar_col_25, varchar_col_26, varchar_col_27, varchar_col_28, varchar_col_29, varchar_col_30, varchar_col_31, varchar_col_32, varchar_col_33, varchar_col_34, varchar_col_35, varchar_col_36, varchar_col_37, varchar_col_38, varchar_col_39, varchar_col_40, varchar_col_41, varchar_col_42, varchar_col_43, varchar_col_44, varchar_col_45, varchar_col_46, varchar_col_47, varchar_col_48, varchar_col_49, varchar_col_50, varchar_col_51, varchar_col_52, varchar_col_53, varchar_col_54, varchar_col_55, varchar_col_56, varchar_col_57, varchar_col_58, varchar_col_59, varchar_col_60, varchar_col_61, varchar_col_62, varchar_col_63, varchar_col_64, varchar_col_65, varchar_col_66, varchar_col_67, varchar_col_68, varchar_col_69, varchar_col_70, varchar_col_71, varchar_col_72, varchar_col_73, varchar_col_74, varchar_col_75, varchar_col_76, varchar_col_77, varchar_col_78, varchar_col_79, varchar_col_80, numeric_col_1, numeric_col_2, numeric_col_3, numeric_col_4, numeric_col_5, numeric_col_6, numeric_col_7, numeric_col_8, numeric_col_9, numeric_col_10) 
            SELECT dsby.subscriber_sid, dsby.sub_unique_sid, dsby.customer_id, dsby.multisim_flag, dsby.name, dsby.msisdn, dsby.msisdn_masked, dsby.billing_type, dsby.subscriber_type, dsby.tariff_plan_sid, dsby.gender, dsby.age, dsby.age_range, dsby.segment, dsby.zipcode, dsby.status, dsby.customer_value, dsby.customer_value_range, dsby.dealer_device_sid, dsby.dealer_sim_sid, dsby.employee_ind, dsby.marital_status, dsby.birthdate, dsby.tariff_plan_eff_date, dsby.language, dsby.mvno, dsby.account_id, dsby.account_name, dsby.account_type, dsby.corp_id, dsby.corp_name, dsby.opt_out, dsby.home_opnetwork_sid, dsby.city, dsby.province, dsby.region, dsby.country, dsby.segment_2, dsby.date_created, dsby.active, dsby.date_start_id, ?VAR:date_id? AS date_first_transaction, dsby.date_last_transaction, dsby.date_first_call, dsby.date_last_call, dsby.date_first_sms, dsby.date_last_sms, dsby.date_first_crm, dsby.date_last_crm, dsby.date_end_id, dsby.billing_cycle, dsby.convergence_type, dsby.curr_tac_code_sid, dsby.curr_device_os_version_sid, dsby.rec_type, dsby.imsi, dsby.loyalty_sid, dsby.option_group_sid, dsby.last_imei, dsby.last_tac, dsby.activation_date, dsby.deactivation_date, dsby.contract_start_date, dsby.contract_end_date, dsby.hash_type1, dsby.hash_type2, dsby.sub_id, dsby.credit_rating_norm, dsby.credit_rating_desc, dsby.credit_delinq_amount, dsby.restrict_ind, dsby.integer_col_1, dsby.integer_col_2, dsby.integer_col_3, dsby.integer_col_4, dsby.integer_col_5, dsby.integer_col_6, dsby.integer_col_7, dsby.integer_col_8, dsby.integer_col_9, dsby.integer_col_10, dsby.integer_col_11, dsby.integer_col_12, dsby.integer_col_13, dsby.integer_col_14, dsby.integer_col_15, dsby.integer_col_16, dsby.integer_col_17, dsby.integer_col_18, dsby.integer_col_19, dsby.integer_col_20, dsby.integer_col_21, dsby.integer_col_22, dsby.integer_col_23, dsby.integer_col_24, dsby.integer_col_25, dsby.integer_col_26, dsby.integer_col_27, dsby.integer_col_28, dsby.integer_col_29, dsby.integer_col_30, dsby.varchar_col_1, dsby.varchar_col_2, dsby.varchar_col_3, dsby.varchar_col_4, dsby.varchar_col_5, dsby.varchar_col_6, dsby.varchar_col_7, dsby.varchar_col_8, dsby.varchar_col_9, dsby.varchar_col_10, dsby.varchar_col_11, dsby.varchar_col_12, dsby.varchar_col_13, dsby.varchar_col_14, dsby.varchar_col_15, dsby.varchar_col_16, dsby.varchar_col_17, dsby.varchar_col_18, dsby.varchar_col_19, dsby.varchar_col_20, dsby.varchar_col_21, dsby.varchar_col_22, dsby.varchar_col_23, dsby.varchar_col_24, dsby.varchar_col_25, dsby.varchar_col_26, dsby.varchar_col_27, dsby.varchar_col_28, dsby.varchar_col_29, dsby.varchar_col_30, dsby.varchar_col_31, dsby.varchar_col_32, dsby.varchar_col_33, dsby.varchar_col_34, dsby.varchar_col_35, dsby.varchar_col_36, dsby.varchar_col_37, dsby.varchar_col_38, dsby.varchar_col_39, dsby.varchar_col_40, dsby.varchar_col_41, dsby.varchar_col_42, dsby.varchar_col_43, dsby.varchar_col_44, dsby.varchar_col_45, dsby.varchar_col_46, dsby.varchar_col_47, dsby.varchar_col_48, dsby.varchar_col_49, dsby.varchar_col_50, dsby.varchar_col_51, dsby.varchar_col_52, dsby.varchar_col_53, dsby.varchar_col_54, dsby.varchar_col_55, dsby.varchar_col_56, dsby.varchar_col_57, dsby.varchar_col_58, dsby.varchar_col_59, dsby.varchar_col_60, dsby.varchar_col_61, dsby.varchar_col_62, dsby.varchar_col_63, dsby.varchar_col_64, dsby.varchar_col_65, dsby.varchar_col_66, dsby.varchar_col_67, dsby.varchar_col_68, dsby.varchar_col_69, dsby.varchar_col_70, dsby.varchar_col_71, dsby.varchar_col_72, dsby.varchar_col_73, dsby.varchar_col_74, dsby.varchar_col_75, dsby.varchar_col_76, dsby.varchar_col_77, dsby.varchar_col_78, dsby.varchar_col_79, dsby.varchar_col_80, dsby.numeric_col_1, dsby.numeric_col_2, dsby.numeric_col_3, dsby.numeric_col_4, dsby.numeric_col_5, dsby.numeric_col_6, dsby.numeric_col_7, dsby.numeric_col_8, dsby.numeric_col_9, dsby.numeric_col_10 
              FROM dim_subscriber_sby dsby
                    INNER JOIN tmp_request_unksubs_?VAR:date_id? fs ON fs.raw_msisdn = dsby.msisdn
              WHERE NOT EXISTS(SELECT * FROM dim_subscriber dsub WHERE fs.raw_msisdn = dsub.msisdn AND dsub.active = ''Y'');
    COMMIT;

    
    INSERT INTO dim_subscriber ( subscriber_sid, sub_unique_sid, customer_id, multisim_flag, name, msisdn, msisdn_masked, billing_type, subscriber_type, tariff_plan_sid, gender, age, age_range, segment, zipcode, status, customer_value, customer_value_range, dealer_device_sid, dealer_sim_sid, employee_ind, marital_status, birthdate, tariff_plan_eff_date, language, mvno, account_id, account_name, account_type, corp_id, corp_name, opt_out, home_opnetwork_sid, city, province, region, country, segment_2, date_created, active, date_start_id, date_first_transaction, date_last_transaction, date_first_call, date_last_call, date_first_sms, date_last_sms, date_first_crm, date_last_crm, date_end_id, billing_cycle, convergence_type, curr_tac_code_sid, curr_device_os_version_sid, rec_type, imsi, loyalty_sid, option_group_sid, last_imei, last_tac, activation_date, deactivation_date, contract_start_date, contract_end_date, hash_type1, hash_type2, sub_id, credit_rating_norm, credit_rating_desc, credit_delinq_amount, restrict_ind, integer_col_1, integer_col_2, integer_col_3, integer_col_4, integer_col_5, integer_col_6, integer_col_7, integer_col_8, integer_col_9, integer_col_10, integer_col_11, integer_col_12, integer_col_13, integer_col_14, integer_col_15, integer_col_16, integer_col_17, integer_col_18, integer_col_19, integer_col_20, integer_col_21, integer_col_22, integer_col_23, integer_col_24, integer_col_25, integer_col_26, integer_col_27, integer_col_28, integer_col_29, integer_col_30, varchar_col_1, varchar_col_2, varchar_col_3, varchar_col_4, varchar_col_5, varchar_col_6, varchar_col_7, varchar_col_8, varchar_col_9, varchar_col_10, varchar_col_11, varchar_col_12, varchar_col_13, varchar_col_14, varchar_col_15, varchar_col_16, varchar_col_17, varchar_col_18, varchar_col_19, varchar_col_20, varchar_col_21, varchar_col_22, varchar_col_23, varchar_col_24, varchar_col_25, varchar_col_26, varchar_col_27, varchar_col_28, varchar_col_29, varchar_col_30, varchar_col_31, varchar_col_32, varchar_col_33, varchar_col_34, varchar_col_35, varchar_col_36, varchar_col_37, varchar_col_38, varchar_col_39, varchar_col_40, varchar_col_41, varchar_col_42, varchar_col_43, varchar_col_44, varchar_col_45, varchar_col_46, varchar_col_47, varchar_col_48, varchar_col_49, varchar_col_50, varchar_col_51, varchar_col_52, varchar_col_53, varchar_col_54, varchar_col_55, varchar_col_56, varchar_col_57, varchar_col_58, varchar_col_59, varchar_col_60, varchar_col_61, varchar_col_62, varchar_col_63, varchar_col_64, varchar_col_65, varchar_col_66, varchar_col_67, varchar_col_68, varchar_col_69, varchar_col_70, varchar_col_71, varchar_col_72, varchar_col_73, varchar_col_74, varchar_col_75, varchar_col_76, varchar_col_77, varchar_col_78, varchar_col_79, varchar_col_80, numeric_col_1, numeric_col_2, numeric_col_3, numeric_col_4, numeric_col_5, numeric_col_6, numeric_col_7, numeric_col_8, numeric_col_9, numeric_col_10 )
    SELECT
            NEXTVAL(''dl_sub_sid_seq'')                 AS subscriber_sid,
            CASE WHEN dsubtempl.subscriber_sid = 4 THEN -4 ELSE NEXTVAL(''dl_sub_sid_seq'') END AS sub_unique_sid,
            dsubtempl.customer_id                       AS customer_id,
            dsubtempl.multisim_flag,
            dsubtempl.name,
            fs.raw_msisdn                               AS msisdn,
            CASE
              WHEN LENGTH(fs.raw_msisdn) > 4
              THEN SUBSTR(fs.raw_msisdn,1,LENGTH(fs.raw_msisdn)-4) || ''XXXX'' 
              ELSE fs.raw_msisdn
            END                                         AS msisdn_masked,
            dsubtempl.billing_type,
            dsubtempl.subscriber_type,
            dsubtempl.tariff_plan_sid,
            dsubtempl.gender,
            dsubtempl.age,
            dsubtempl.age_range,
            dsubtempl.segment,
            dsubtempl.zipcode,
            dsubtempl.status,
            dsubtempl.customer_value,
            dsubtempl.customer_value_range,
            dsubtempl.dealer_device_sid,
            dsubtempl.dealer_sim_sid,
            dsubtempl.employee_ind,
            dsubtempl.marital_status,
            dsubtempl.birthdate,
            dsubtempl.tariff_plan_eff_date,
            dsubtempl.language,
            dsubtempl.mvno,
            dsubtempl.account_id,
            dsubtempl.account_name,
            dsubtempl.account_type,
            dsubtempl.corp_id,
            dsubtempl.corp_name,
            dsubtempl.opt_out,
            fs.sub_opnet_sid                            AS home_opnetwork_sid,
            dsubtempl.city,
            dsubtempl.province,
            dsubtempl.region,
            dsubtempl.country,
            dsubtempl.segment_2,
            CURRENT_DATE                                AS date_created,
            dsubtempl.active,
            ?VAR:date_id?                               AS date_start_id,
            ?VAR:date_id?                               AS date_first_transaction,
            dsubtempl.date_last_transaction,
            dsubtempl.date_first_call,
            dsubtempl.date_last_call,
            dsubtempl.date_first_sms,
            dsubtempl.date_last_sms,
            dsubtempl.date_first_crm,
            dsubtempl.date_last_crm,
            dsubtempl.date_end_id,
            dsubtempl.billing_cycle,
            dsubtempl.convergence_type,
            dsubtempl.curr_tac_code_sid,
            dsubtempl.curr_device_os_version_sid,
            dsubtempl.rec_type,
            fs.raw_imsi                                 AS imsi,
            dsubtempl.loyalty_sid,
            dsubtempl.option_group_sid,
            dsubtempl.last_imei,
            dsubtempl.last_tac,
            dsubtempl.activation_date,
            dsubtempl.deactivation_date,
            dsubtempl.contract_start_date,
            dsubtempl.contract_end_date,
            dsubtempl.hash_type1,
            dsubtempl.hash_type2,
            fs.raw_msisdn                               AS sub_id,
            dsubtempl.credit_rating_norm,
            dsubtempl.credit_rating_desc,
            dsubtempl.credit_delinq_amount,
            dsubtempl.restrict_ind,
            dsubtempl.integer_col_1, dsubtempl.integer_col_2, dsubtempl.integer_col_3, dsubtempl.integer_col_4, dsubtempl.integer_col_5, dsubtempl.integer_col_6, dsubtempl.integer_col_7, dsubtempl.integer_col_8, dsubtempl.integer_col_9, dsubtempl.integer_col_10, dsubtempl.integer_col_11, dsubtempl.integer_col_12, dsubtempl.integer_col_13, dsubtempl.integer_col_14, dsubtempl.integer_col_15, dsubtempl.integer_col_16, dsubtempl.integer_col_17, dsubtempl.integer_col_18, dsubtempl.integer_col_19, dsubtempl.integer_col_20, dsubtempl.integer_col_21, dsubtempl.integer_col_22, dsubtempl.integer_col_23, dsubtempl.integer_col_24, dsubtempl.integer_col_25, dsubtempl.integer_col_26, dsubtempl.integer_col_27, dsubtempl.integer_col_28, dsubtempl.integer_col_29, dsubtempl.integer_col_30, dsubtempl.varchar_col_1, dsubtempl.varchar_col_2, dsubtempl.varchar_col_3, dsubtempl.varchar_col_4, dsubtempl.varchar_col_5, dsubtempl.varchar_col_6, dsubtempl.varchar_col_7, dsubtempl.varchar_col_8, dsubtempl.varchar_col_9, dsubtempl.varchar_col_10, dsubtempl.varchar_col_11, dsubtempl.varchar_col_12, dsubtempl.varchar_col_13, dsubtempl.varchar_col_14, dsubtempl.varchar_col_15, dsubtempl.varchar_col_16, dsubtempl.varchar_col_17, dsubtempl.varchar_col_18, dsubtempl.varchar_col_19, dsubtempl.varchar_col_20, dsubtempl.varchar_col_21, dsubtempl.varchar_col_22, dsubtempl.varchar_col_23, dsubtempl.varchar_col_24, dsubtempl.varchar_col_25, dsubtempl.varchar_col_26, dsubtempl.varchar_col_27, dsubtempl.varchar_col_28, dsubtempl.varchar_col_29, dsubtempl.varchar_col_30, dsubtempl.varchar_col_31, dsubtempl.varchar_col_32, dsubtempl.varchar_col_33, dsubtempl.varchar_col_34, dsubtempl.varchar_col_35, dsubtempl.varchar_col_36, dsubtempl.varchar_col_37, dsubtempl.varchar_col_38, dsubtempl.varchar_col_39, dsubtempl.varchar_col_40, dsubtempl.varchar_col_41, dsubtempl.varchar_col_42, dsubtempl.varchar_col_43, dsubtempl.varchar_col_44, dsubtempl.varchar_col_45, dsubtempl.varchar_col_46, dsubtempl.varchar_col_47, dsubtempl.varchar_col_48, dsubtempl.varchar_col_49, dsubtempl.varchar_col_50, dsubtempl.varchar_col_51, dsubtempl.varchar_col_52, dsubtempl.varchar_col_53, dsubtempl.varchar_col_54, dsubtempl.varchar_col_55, dsubtempl.varchar_col_56, dsubtempl.varchar_col_57, dsubtempl.varchar_col_58, dsubtempl.varchar_col_59, dsubtempl.varchar_col_60, dsubtempl.varchar_col_61, dsubtempl.varchar_col_62, dsubtempl.varchar_col_63, dsubtempl.varchar_col_64, dsubtempl.varchar_col_65, dsubtempl.varchar_col_66, dsubtempl.varchar_col_67, dsubtempl.varchar_col_68, dsubtempl.varchar_col_69, dsubtempl.varchar_col_70, dsubtempl.varchar_col_71, dsubtempl.varchar_col_72, dsubtempl.varchar_col_73, dsubtempl.varchar_col_74, dsubtempl.varchar_col_75, dsubtempl.varchar_col_76, dsubtempl.varchar_col_77, dsubtempl.varchar_col_78, dsubtempl.varchar_col_79, dsubtempl.varchar_col_80, dsubtempl.numeric_col_1, dsubtempl.numeric_col_2, dsubtempl.numeric_col_3, dsubtempl.numeric_col_4, dsubtempl.numeric_col_5, dsubtempl.numeric_col_6, dsubtempl.numeric_col_7, dsubtempl.numeric_col_8, dsubtempl.numeric_col_9, dsubtempl.numeric_col_10
    FROM (
            SELECT raw_msisdn,
                   MAX(raw_apn) AS raw_apn,
                   MAX(raw_imsi) AS raw_imsi,
                   MAX(sub_opnet_sid) AS sub_opnet_sid
              FROM tmp_request_unksubs_?VAR:date_id?
          GROUP BY raw_msisdn
    ) fs
    INNER JOIN dim_subscriber_templ dsubtempl
            ON ( dsubtempl.subscriber_sid = CASE
                          WHEN raw_apn IS NOT NULL AND raw_apn = ''?PARAMETER:default_apn_value?''
                              THEN 4 
                          WHEN sub_opnet_sid IN ( ?PARAMETER:home_plmn_list? )
                              THEN 1 
                          ELSE 2 
                        END )
          WHERE NOT EXISTS (SELECT * FROM dim_subscriber dsub WHERE fs.raw_msisdn = dsub.msisdn AND dsub.active = ''Y'');
    COMMIT;

DROP TABLE IF EXISTS tmp_request_unkmeds_?VAR:date_id?;
CREATE LOCAL TEMP TABLE tmp_request_unkmeds_?VAR:date_id? ON COMMIT PRESERVE ROWS
  AS SELECT pattern_sid
       FROM (
              SELECT DISTINCT f.pattern_sid
              FROM fact_raw_http f
                INNER JOIN dim_subscriber ds ON f.raw_msisdn = ds.msisdn
                INNER JOIN map_timeblock mt ON f.time_id = mt.time_id
                INNER JOIN dim_media_sby dm ON f.pattern_sid = dm.pattern_sid
              WHERE f.date_id = ?VAR:date_id?
                and ds.active = ''Y'' 
                and (dm.pattern_type = ''Application'' or f.pv_mask in (?PARAMETER:CIMXM_REQUEST_AGG_PV_MASK?))
                and (dm.pattern_sid is null or dm.media_category_name != ''Promotional Servers'')
                and trim(lower(f.raw_hostname)) not in
                    (''classicrock.about.com'', ''genealogy.about.com'', ''payment.aol.com'', ''familycrafts.about.com'', ''jobsearch.about.com'', 
                    ''config.sa.aol.com'', ''backtoschool.about.com'', ''sexuality.about.com'', ''hb.lycos.com'', ''thyroid.about.com'', 
                    ''freebies.about.com'', ''rad.msn.com'')
                and not regexp_ilike(trim(f.raw_hostname), ''^(ads|ad|webad)\.'')
                and not regexp_ilike(trim(f.raw_hostname), ''\.(((advertising|atdmt|atwola|whenu|unicast|mediaplex|zedo|yimg)\.com)|((bidclix|mb00|doubleclick|qksrv|fastclick|m0|msads)\.net))$'')
                AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
            ) fs
      WHERE NOT EXISTS (SELECT * FROM dim_media WHERE pattern_sid = fs.pattern_sid);


INSERT INTO dim_media (pattern_sid,
    pattern_id,
    pattern_type,
    media_category_name,
    media_category_web_id,
    media_category_cs_web_id,
    media_sub_category_name,
    media_sub_category_web_id,
    media_sub_category_cs_web_id,
    media_provider_name,
    media_provider_web_id,
    media_provider_cs_web_id,
    property_name,
    property_web_id,
    media_title_name,
    media_title_web_id,
    channel_name,
    channel_web_id,
    subchannel_name,
    subchannel_web_id,
    group_name,
    group_web_id,
    subgroup_name,
    subgroup_web_id,
    appl_name,
    orange_service,
    date_updated)
SELECT src.pattern_sid,
    pattern_id,
    pattern_type,
    media_category_name,
    media_category_web_id,
    media_category_cs_web_id,
    media_sub_category_name,
    media_sub_category_web_id,
    media_sub_category_cs_web_id,
    media_provider_name,
    media_provider_web_id,
    media_provider_cs_web_id,
    property_name,
    property_web_id,
    media_title_name,
    media_title_web_id,
    channel_name,
    channel_web_id,
    subchannel_name,
    subchannel_web_id,
    group_name,
    group_web_id,
    subgroup_name,
    subgroup_web_id,
    appl_name,
    orange_service,
    to_char(NOW(), ''YYYYMMDDHH24'')::INT AS date_updated
FROM dim_media_sby src
    INNER JOIN tmp_request_unkmeds_?VAR:date_id? fs ON fs.pattern_sid = src.pattern_sid
WHERE NOT EXISTS(SELECT * FROM dim_media WHERE pattern_sid = src.pattern_sid);
COMMIT;

INSERT INTO dim_tac
    (
        tac_code_sid,
        device_sid,
        tac_code
    )
    SELECT tc.tac_code_sid, 
           -1 AS device_sid, 
           tc.tac_code_sid
      FROM tmp_request_unktac_?VAR:date_id? tc
     WHERE NOT EXISTS (SELECT * FROM dim_tac dtac WHERE tc.tac_code_sid = dtac.tac_code_sid);
COMMIT;

INSERT INTO dim_network 
(
    network_sid,
    hash_type1,
    hash_type2,
    location_id,
    active,
    date_start,
    date_end,
    date_updated,
    mcc,
    mnc,
    lac,
    ci,
    ci_centroid,
    latitude,
    longitude,
    level_1_sid,
    level_1,
    level_2_sid,
    level_2,
    level_3_sid,
    level_3,
    level_4_sid,
    level_4,
    level_5_sid,
    level_5,
    level_6_sid,
    level_6,
    nw_level_1_sid,
    nw_level_1,
    nw_level_2_sid,
    nw_level_2,
    nw_level_3_sid,
    nw_level_3,
    nw_level_4_sid,
    nw_level_4,
    nw_level_5_sid,
    nw_level_5,
    nw_level_6_sid,
    nw_level_6,
    azimuth,
    status
)
    SELECT  NEXTVAL(''dl_network_sid_seq'') AS network_sid,
            -1 AS hash_type1,
            -1 AS hash_type2,
            tn.location_id AS location_id,
            1 AS active,
            ?VAR:date_id? AS date_start,
            20990101 AS date_end,
            TO_CHAR(NOW(), ''YYYYMMDD'')::INT AS date_updated,
            tn.mcc,
            tn.mnc,
            nvl(tn.raw_lac,-1) AS lac,
            nvl(tn.raw_ci,-1) AS ci,
            ST_AsBinary(ST_GeomFromText(''POINT(0 0)''))::VARBINARY AS ci_centroid,
            0 AS latitude,
            0 AS longitude,
            HASH(''{Unknown-No Match}'') AS level_1_sid,
            ''{Unknown-No Match}'' AS level_1,
            HASH(''{Unknown-No Match}{Unknown-No Match}'') AS level_2_sid,
            ''{Unknown-No Match}'' AS level_2,
            HASH(''{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}'') AS level_3_sid,
            ''{Unknown-No Match}'' AS level_3,
            HASH(''{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}'') AS level_4_sid,
            ''{Unknown-No Match}'' AS level_4,
            HASH(''{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}'') AS level_5_sid,
            ''{Unknown-No Match}'' AS level_5,
            HASH(''{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}{Unknown-No Match}'') AS level_6_sid,
            ''{Unknown-No Match}'' AS level_6,
            -101 AS nw_level_1_sid,
            ''{Unknown-No Match}'' AS nw_level_1,
            -102 AS nw_level_2_sid,
            ''{Unknown-No Match}'' AS nw_level_2,
            -103 AS nw_level_3_sid,
            ''{Unknown-No Match}'' AS nw_level_3,
            -104 AS nw_level_4_sid,
            ''{Unknown-No Match}'' AS nw_level_4,
            -105 AS nw_level_5_sid,
            ''{Unknown-No Match}'' AS nw_level_5,
            -106 AS nw_level_6_sid,
            ''{Unknown-No Match}'' AS nw_level_6,
            0 AS azimuth,
            1 AS status
       FROM (
            SELECT location_id,
                   SUBSTR(location_id::VARCHAR(20),2,3)::INT AS mcc,
                   SUBSTR(location_id::VARCHAR(20),5,3)::INT AS mnc,
                   MAX(raw_lac) AS raw_lac,
                   MAX(raw_ci) AS raw_ci
            FROM tmp_request_unkloc_?VAR:date_id?
            where location_id>1000000
            GROUP BY location_id
            ) tn
      WHERE NOT EXISTS (SELECT * FROM dim_network dn WHERE tn.location_id = dn.location_id AND dn.active = 1);
COMMIT;

INSERT INTO dim_operator_network 
       (
            opnetwork_sid,
            opnet_unique_sid,
            is_domestic,
            seen_in_traffic,
            mcc_code,
            mcc_country,
            mcc_country_iso,
            mnc_code,
            mnc_network,
            display_name,
            mcc_country_latitude,
            mcc_country_longitude,
            mcc_country_centroid,
            continent_iso,
            continent_name,
            sync
       )
    SELECT fs.opnetwork_sid,
           fs.opnet_unique_sid,
           fs.is_domestic,
           fs.seen_in_traffic,
           fs.mcc_code,
           NVL(dcc.mcc_country,''{Unknown-Unidentified Country}'') as mcc_country,
           dcc.mcc_country_iso,
           fs.mnc_code,
           ''{Unknown-Unidentified Network}'' AS mnc_network,
           fs.display_name,
           NVL(dcc.mcc_country_latitude,0) as mcc_country_latitude,
           NVL(dcc.mcc_country_longitude,0) as mcc_country_longitude,
           NVL(dcc.mcc_country_centroid,ST_AsBinary(ST_GeomFromText(''POINT (0 0)''))::VARBINARY) as mcc_country_centroid,
           sdc.continent_iso,
           NVL(sdc.continent_name, ''{Unknown-Unidentified Location}'') AS continent_name,
           false AS sync
      FROM tmp_request_unkopnet_?VAR:date_id? fs
             LEFT OUTER JOIN ( SELECT mcc_code,
                                      mcc_country,
                                      mcc_country_iso,
                                      mcc_country_latitude,
                                      mcc_country_longitude,
                                      mcc_country_centroid,
                                      ROW_NUMBER() OVER (PARTITION BY mcc_code ORDER BY mnc_code) as rid
                                 FROM dim_operator_network
                              ) dcc ON dcc.mcc_code = fs.mcc_code AND dcc.rid = 1
             LEFT JOIN stg_dim_centroids sdc ON sdc.mcc_country_iso = dcc.mcc_country_iso
     WHERE NOT EXISTS (SELECT * FROM dim_operator_network don WHERE don.opnetwork_sid = fs.opnetwork_sid);

UPDATE dim_operator_network 
  SET
    sync = true,
    level_1 = opv.level_1,
    level_1_sid = opv.level_1_sid,
    level_2 = opv.level_2,
    level_2_sid = opv.level_2_sid,
    level_3 = opv.level_3,
    level_3_sid = opv.level_3_sid,
    level_4 = opv.level_4,
    level_4_sid = opv.level_4_sid,
    level_5 = opv.level_5,
    level_5_sid = opv.level_5_sid
FROM
     v_opnetwork_override opv
WHERE
    dim_operator_network.opnetwork_sid = opv.opnetwork_sid
    AND dim_operator_network.sync = false;

UPDATE dim_operator_network 
   SET seen_in_traffic = TRUE 
 WHERE opnetwork_sid IN ( 
              SELECT carrier_opnet_sid
                FROM fact_raw_http f 
                     INNER JOIN tmp_request_daily_audits_?VAR:date_id? a 
                             ON f.audit_sid = a.audit_sid 
                     INNER JOIN dim_operator_network d
                             ON d.opnetwork_sid = f.carrier_opnet_sid 
               WHERE seen_in_traffic = FALSE 
                 AND date_id = ?VAR:date_id?
               GROUP BY carrier_opnet_sid); 
COMMIT;

INSERT INTO dim_apn
        (
             apn_sid,
             apn_name
        )           
      SELECT fs.apn_sid,
             fs.raw_apn AS apn_name
        FROM tmp_request_unkapn_?VAR:date_id? fs
       WHERE NOT EXISTS (SELECT * FROM dim_apn da WHERE fs.apn_sid = da.apn_sid);
COMMIT;

INSERT INTO dim_ggsn
        (
             ggsn_sid,
             ggsn_name,
             ggsn_ip
        )           
      SELECT fs.ggsn_sid,
             fs.raw_ggsn_name AS ggsn_name,
             fs.raw_ggsn_ip AS ggsn_ip
        FROM tmp_request_unkggsn_?VAR:date_id? fs
       WHERE NOT EXISTS (SELECT * FROM dim_ggsn dg WHERE fs.ggsn_sid = dg.ggsn_sid);
COMMIT;

INSERT INTO dim_probe
        (
             probe_sid,
             probe_name
        )           
      SELECT fs.probe_sid,
             fs.raw_probe_name AS probe_name
        FROM tmp_request_unkprobe_?VAR:date_id? fs
       WHERE NOT EXISTS (SELECT * FROM dim_probe dp WHERE fs.probe_sid = dp.probe_sid);
COMMIT;


DROP TABLE IF EXISTS tmp_aggr_daily_request_?VAR:date_id? CASCADE;
CREATE TABLE tmp_aggr_daily_request_?VAR:date_id? LIKE fact_daily_request INCLUDING PROJECTIONS;

INSERT  INTO tmp_aggr_daily_request_?VAR:date_id?
( 
    audit_sid,    date_id,    timeblock_sid,    subscriber_sid,    sub_unique_sid,    apn_sid,    ggsn_sid,    probe_sid,    roaming_sid,    network_sid,    opnetwork_sid,    rat_sid,    pattern_sid,    tac_code_sid,    device_os_version_sid,    dev_unique_sid,    tethering_sid,    port_app_sid,    pageviews_count,    visits_count,    visits_duration,    visits_portion,    visit_number
)
  SELECT membersid_seq.CURRVAL,
        f.date_id,        f.timeblock_sid,        f.subscriber_sid,        f.sub_unique_sid,        f.apn_sid,        f.ggsn_sid,        f.probe_sid,        f.roaming_sid,        NVL(dn.network_sid, -1) AS network_sid,        f.opnetwork_sid,        f.rat_sid,        f.pattern_sid,        f.tac_code_sid,        NVL(sov.device_os_version_sid, NVL(dd.rel_device_os_version_sid, -1)) AS device_os_version_sid,        f.dev_unique_sid,        f.tethering_sid,
        NVL(s1.port_app_sid, NVL(s2.port_app_sid, -1)) AS port_app_sid,
        SUM(f.pageviews_count) as pageviews_count,
        SUM(CASE WHEN visit_index = 1 THEN 1 ELSE 0 END) as visits_count,
        SUM(f.pv_duration) as visits_duration,
        SUM(f.duration_portion) as visits_portion,
        NULL::INT as visit_number
    FROM (  SELECT 
              date_id,              timeblock_sid,              subscriber_sid,              sub_unique_sid,              apn_sid,              ggsn_sid,              probe_sid,              roaming_sid,              location_id,              opnetwork_sid,              rat_sid,              pattern_sid,              tac_code_sid,              dev_unique_sid,              tethering_sid,              service_l1_id,              service_l2_id,              visit_number,
              ROW_NUMBER() OVER( PARTITION BY sub_unique_sid, visit_number
                                 ORDER BY SUM(pv_duration) desc, rat_sid desc ) as visit_index,
              SUM(pv) as pageviews_count,
              SUM(pv_duration) as pv_duration,
              CAST(1.0*SUM(pv_duration)/MAX(visit_duration) AS NUMERIC(32,12)) as duration_portion
            FROM ( SELECT
                     date_id,                     timeblock_sid,                     subscriber_sid,                     sub_unique_sid,                     apn_sid,                         ggsn_sid,                     probe_sid,                     roaming_sid,                     location_id,                     opnetwork_sid,                     rat_sid,                     tac_code_sid,                     pattern_sid,                     dev_unique_sid,                     tethering_sid,                     service_l1_id,                     service_l2_id,                     visit_number,                     pv_duration,                     pv,
                     SUM(pv_duration) OVER(PARTITION BY sub_unique_sid, visit_number) as visit_duration
                   FROM ( 
                     SELECT 
                       date_id,                       timeblock_sid,                       subscriber_sid,                       sub_unique_sid,                       apn_sid,                       ggsn_sid,                       probe_sid,                       roaming_sid,                       location_id,                       opnetwork_sid,                       rat_sid,                       tac_code_sid,                       pattern_sid,                       dev_unique_sid,                       tethering_sid,                       service_l1_id,                       service_l2_id,                       ts,
                       web_id * 1000000 + SUM( CASE WHEN ((EXTRACT(EPOCH FROM ts - lag_ts)/ 60) &gt; 30) THEN 1 ELSE 0 END ) OVER (PARTITION BY sub_unique_sid, web_id ORDER BY ts) AS visit_number,
                       NVL( EXTRACT(EPOCH FROM lead_ts - ts), 60 ) AS duration,
                       CASE
                         WHEN dur_categories
                              THEN (CASE WHEN EXTRACT(EPOCH FROM lead_ts - ts) &gt;= 1800
                                         THEN 1800
                                         ELSE DECODE( EXTRACT(EPOCH FROM lead_ts - ts), NULL, 60, 0, 1, EXTRACT(EPOCH FROM lead_ts - ts))
                                    END)
                         WHEN ( web_id = lead_web_id OR web_id = lag_web_id )
                              THEN (CASE WHEN EXTRACT(EPOCH FROM lead_ts - ts) &gt;= 600
                                         THEN 600
                                         ELSE DECODE( EXTRACT(EPOCH FROM lead_ts - ts), NULL, 60, 0, 1, EXTRACT(EPOCH FROM lead_ts - ts))
                                    END)
                         WHEN EXTRACT(EPOCH FROM lead_ts - ts) &lt;= 120
                              THEN DECODE( EXTRACT(EPOCH FROM lead_ts - ts), NULL, 60, 0, 1, EXTRACT(EPOCH FROM lead_ts - ts))
                         WHEN EXTRACT(EPOCH FROM lead_ts - ts) &gt;= 1800
                              THEN 60
                         ELSE 120
                       END as pv_duration,
                       ( web_id = lead_web_id OR web_id = lag_web_id ) AS engaged,
                       CASE WHEN pv THEN 1 ELSE 0 END as pv,
                       dur_categories
                    FROM 
                    (
                      SELECT 
                        date_id,
                        timeblock_sid,
                        subscriber_sid,
                        sub_unique_sid,
                        apn_sid,    
                        ggsn_sid,
                        probe_sid,
                        roaming_sid,
                        location_id,
                        opnetwork_sid,
                        rat_sid,
                        tac_code_sid,
                        dev_unique_sid,
                        pattern_sid,
                        web_id,
                        tethering_sid,
                        service_l1_id,
                        service_l2_id,
                        ts,
                        LAG(ts) OVER (PARTITION BY sub_unique_sid, web_id ORDER BY ts, http_sid) AS lag_ts,
                        LEAD(ts) OVER (PARTITION BY sub_unique_sid ORDER BY ts, http_sid)        AS lead_ts,
                        LAG(web_id) OVER (PARTITION BY sub_unique_sid ORDER BY ts, http_sid)     AS lag_web_id,
                        LEAD(web_id) OVER (PARTITION BY sub_unique_sid ORDER BY ts, http_sid)    AS lead_web_id,
                        pv,
                        dur_categories
                      FROM
                      (
                        SELECT 
                            f.http_sid,
                            f.date_id,
                            CASE WHEN dayofweek(TO_DATE(cast(f.date_id as varchar(10)), ''YYYYMMDD'')) BETWEEN 2 AND 6 THEN mt.timeblock_sid ELSE 2 END AS timeblock_sid,
                            ds.subscriber_sid,
                            ds.sub_unique_sid,
                            NVL(f.apn_sid, -1) AS apn_sid,    
                            NVL(decode(ggsn_sid,0,null,ggsn_sid),-1) AS ggsn_sid,
                            NVL(f.probe_sid, -1) AS probe_sid,
                            f.roaming_sid,
                            f.location_id,
                            f.carrier_opnet_sid AS opnetwork_sid,
                            f.rat_sid,
                            f.tac_code_sid,
                            f.dev_unique_sid,
                            NVL(dm.pattern_sid, -1) AS pattern_sid,
                            CASE
                                WHEN dm.media_category_name = ''Unknown'' or dm.media_provider_name = ''[Non-Reportable]'' THEN -11
                                ELSE NVL(dm.media_provider_cs_web_id, -1)
                            END AS web_id,
                            f.tethering_sid,
                            f.service_l1_id,
                            f.service_l2_id,
                            f.raw_transaction_start as ts,
                            NVL(raw_ref_url_hash is NULL OR raw_ref_url_hash = 0 OR 
                                (EXTRACT(EPOCH FROM raw_transaction_start-LAG(raw_transaction_start) OVER (partition by raw_msisdn, raw_ref_url_hash order by raw_transaction_start, http_sid)) > 3),
                                true) as pv,
                            (lower(dm.media_sub_category_name) in ( ''instant messengers'', ''online gaming'', ''e-mail'' )) as dur_categories
                       FROM fact_raw_http f
                            inner join dim_subscriber ds on f.raw_msisdn = ds.msisdn
                            inner join map_timeblock mt on f.time_id = mt.time_id
                            left outer join dim_media dm on f.pattern_sid = dm.pattern_sid
                       WHERE f.date_id = ?VAR:date_id?
                            and ds.active = ''Y''
                            and (dm.pattern_type = ''Application'' or pv_mask in (?PARAMETER:CIMXM_REQUEST_AGG_PV_MASK?))
                            and (dm.pattern_sid is null or dm.media_category_name != ''Promotional Servers'')
                            and trim(lower(f.raw_hostname)) not in
                                (''classicrock.about.com'', ''genealogy.about.com'', ''payment.aol.com'', ''familycrafts.about.com'', ''jobsearch.about.com'', 
                                ''config.sa.aol.com'', ''backtoschool.about.com'', ''sexuality.about.com'', ''hb.lycos.com'', ''thyroid.about.com'', 
                                ''freebies.about.com'', ''rad.msn.com'')
                            and not regexp_ilike(trim(f.raw_hostname), ''^(ads|ad|webad)\.'')
                            and not regexp_ilike(trim(f.raw_hostname), ''\.(((advertising|atdmt|atwola|whenu|unicast|mediaplex|zedo|yimg)\.com)|((bidclix|mb00|doubleclick|qksrv|fastclick|m0|msads)\.net))$'')
                            AND EXISTS (SELECT * FROM tmp_request_daily_audits_?VAR:date_id? a WHERE f.audit_sid = a.audit_sid)
                    ) f
                    WHERE pv
                ) f
              ) f
           ) f
    GROUP BY date_id,
           timeblock_sid,
           subscriber_sid,
           sub_unique_sid,
           apn_sid,
           ggsn_sid,
           probe_sid,
           roaming_sid,
           location_id,
           opnetwork_sid,
           rat_sid,
           tac_code_sid,
           pattern_sid,
           dev_unique_sid,
           tethering_sid,
           service_l1_id,
           service_l2_id,
           visit_number
 ) f
    LEFT OUTER JOIN (select max(port_app_sid) over (partition by service_group, service_name, service_provider) as port_app_sid,
                            service_port_id,
                            service_category_id
                       from dim_service
                    ) s1 ON (f.service_l1_id = s1.service_category_id AND f.service_l2_id = s1.service_port_id )
    LEFT OUTER JOIN (select max(port_app_sid) over (partition by service_group, service_name, service_provider) as port_app_sid,
                            service_category_id
                       from dim_service
                      where service_port_id = -1
                    ) s2 ON (f.service_l1_id = s2.service_category_id)
    LEFT OUTER JOIN dim_network dn ON f.location_id = dn.location_id
    LEFT OUTER JOIN subscriber_os_version sov ON (f.sub_unique_sid = sov.sub_unique_sid AND f.tac_code_sid = sov.tac_code_sid)
    LEFT OUTER JOIN dim_tac dt ON f.tac_code_sid = dt.tac_code_sid
    LEFT OUTER JOIN dim_device dd ON dt.device_sid = dd.device_sid
GROUP BY f.date_id,
   f.timeblock_sid,
   f.subscriber_sid,
   f.sub_unique_sid,
   f.apn_sid,
   f.ggsn_sid,
   f.probe_sid,
   f.roaming_sid,
   dn.network_sid,
   f.opnetwork_sid,
   f.rat_sid,
   f.tac_code_sid,
   f.pattern_sid,
   NVL(sov.device_os_version_sid, NVL(dd.rel_device_os_version_sid, -1)),
   f.dev_unique_sid,
   f.tethering_sid,
   NVL(s1.port_app_sid, NVL(s2.port_app_sid, -1));
COMMIT;

INSERT INTO dim_audit (
        audit_sid, 
        time_created,
        date_sid, 
        process_id, 
        status,
        integer_col_1, 
        integer_col_2,
        integer_col_3,
        integer_col_4,
        integer_col_5
    )
    SELECT membersid_seq.CURRVAL AS audit_sid, 
           NOW() AS time_created,
           TO_CHAR(SYSDATE, ''YYYYMMDD'')::INT AS date_sid, 
           ''CIMXM_REQUEST_DAILY_AGGREGATION'' AS process_id, 
           2 AS status,
           ?VAR:task_id? AS integer_col_1,
           audit_sid AS integer_col_2, 
           ?VAR:date_id? AS integer_col_3,
           ( SELECT COUNT(1) FROM tmp_aggr_daily_request_?VAR:date_id? ) AS integer_col_4,
           ( SELECT COUNT(1) FROM fact_daily_request WHERE date_id = ?VAR:date_id? ) AS integer_col_5
      FROM tmp_request_daily_audits_?VAR:date_id?;
COMMIT;